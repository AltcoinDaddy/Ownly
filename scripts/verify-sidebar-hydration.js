#!/usr/bin/env node

/**
 * Simple verification script to check sidebar hydration safety
 */

console.log('üîç Verifying sidebar hydration fixes...')

// Check 1: Verify SafeCookies utility exists
try {
  const fs = require('fs')
  const safeCookiesPath = 'lib/hydration/safe-cookies.ts'
  
  if (fs.existsSync(safeCookiesPath)) {
    console.log('‚úÖ SafeCookies utility exists')
    
    const content = fs.readFileSync(safeCookiesPath, 'utf8')
    if (content.includes('typeof document !== "undefined"')) {
      console.log('‚úÖ SafeCookies has proper client-side checks')
    } else {
      console.log('‚ùå SafeCookies missing client-side checks')
    }
  } else {
    console.log('‚ùå SafeCookies utility not found')
  }
} catch (error) {
  console.log('‚ùå Error checking SafeCookies:', error.message)
}

// Check 2: Verify sidebar component uses hydration-safe patterns
try {
  const fs = require('fs')
  const sidebarPath = 'components/ui/sidebar.tsx'
  
  if (fs.existsSync(sidebarPath)) {
    console.log('‚úÖ Sidebar component exists')
    
    const content = fs.readFileSync(sidebarPath, 'utf8')
    
    // Check for hydration-safe imports
    if (content.includes('useHydrated') && content.includes('SafeCookies') && content.includes('safeRandomWidth')) {
      console.log('‚úÖ Sidebar imports all hydration utilities including safeRandomWidth')
    } else if (content.includes('useHydrated') && content.includes('SafeCookies')) {
      console.log('‚úÖ Sidebar imports hydration utilities')
    } else {
      console.log('‚ùå Sidebar missing hydration utility imports')
    }
    
    // Check for proper cookie usage
    if (content.includes('SafeCookies.get') && content.includes('SafeCookies.set')) {
      console.log('‚úÖ Sidebar uses SafeCookies for state persistence')
    } else {
      console.log('‚ùå Sidebar not using SafeCookies properly')
    }
    
    // Check for hydration-safe event listeners
    if (content.includes('useIsomorphicLayoutEffect') && content.includes('isHydrated')) {
      console.log('‚úÖ Sidebar uses hydration-safe event listeners')
    } else {
      console.log('‚ùå Sidebar event listeners may cause hydration issues')
    }
    
    // Check for consistent skeleton widths
    if (content.includes('safeRandomWidth') && content.includes('useMemo')) {
      console.log('‚úÖ Sidebar skeleton uses safeRandomWidth for consistent widths')
    } else if (content.includes('width = showIcon ? \'75%\' : \'65%\'')) {
      console.log('‚úÖ Sidebar skeleton uses consistent widths')
    } else {
      console.log('‚ùå Sidebar skeleton may have inconsistent widths')
    }
    
  } else {
    console.log('‚ùå Sidebar component not found')
  }
} catch (error) {
  console.log('‚ùå Error checking sidebar component:', error.message)
}

// Check 3: Verify hydration index exports SafeCookies
try {
  const fs = require('fs')
  const indexPath = 'lib/hydration/index.ts'
  
  if (fs.existsSync(indexPath)) {
    const content = fs.readFileSync(indexPath, 'utf8')
    if (content.includes('SafeCookies')) {
      console.log('‚úÖ SafeCookies exported from hydration index')
    } else {
      console.log('‚ùå SafeCookies not exported from hydration index')
    }
  }
} catch (error) {
  console.log('‚ùå Error checking hydration index:', error.message)
}

console.log('\nüéØ Sidebar hydration fixes verification complete!')
console.log('\nKey improvements made:')
console.log('‚Ä¢ Created SafeCookies utility for SSR-safe cookie operations')
console.log('‚Ä¢ Updated SidebarProvider to defer cookie loading until after hydration')
console.log('‚Ä¢ Fixed event listeners to only attach after hydration')
console.log('‚Ä¢ Made skeleton widths consistent to prevent hydration mismatches')
console.log('‚Ä¢ Added proper client-side guards for all browser-dependent operations')