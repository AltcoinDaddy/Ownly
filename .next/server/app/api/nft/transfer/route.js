"use strict";(()=>{var e={};e.id=844,e.ids=[844],e.modules={3295:e=>{e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},29294:e=>{e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},85567:(e,r,t)=>{t.r(r),t.d(r,{patchFetch:()=>N,routeModule:()=>R,serverHooks:()=>A,workAsyncStorage:()=>f,workUnitAsyncStorage:()=>l});var s={};t.r(s),t.d(s,{POST:()=>p});var a=t(45002),n=t(89587),o=t(1202),i=t(24715),c=t(76036),u=t(30626);function d(e){return/^0x[a-fA-F0-9]{16}$/.test(e)}async function p(e){try{let{nft_id:r,from:t,to:s}=await e.json();if(!r)return i.NextResponse.json({success:!1,error:"NFT ID is required",type:"VALIDATION_ERROR"},{status:400});if(!t)return i.NextResponse.json({success:!1,error:"From address is required",type:"VALIDATION_ERROR"},{status:400});if(!s)return i.NextResponse.json({success:!1,error:"To address is required",type:"VALIDATION_ERROR"},{status:400});if(!(/^\d+$/.test(r)||/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(r)))return i.NextResponse.json({success:!1,error:"Invalid NFT ID format",type:"VALIDATION_ERROR"},{status:400});if(!d(t))return i.NextResponse.json({success:!1,error:"Invalid from address format. Expected format: 0x followed by 16 hexadecimal characters",type:"VALIDATION_ERROR"},{status:400});if(!d(s))return i.NextResponse.json({success:!1,error:"Invalid to address format. Expected format: 0x followed by 16 hexadecimal characters",type:"VALIDATION_ERROR"},{status:400});if(t.toLowerCase()===s.toLowerCase())return i.NextResponse.json({success:!1,error:"Cannot transfer NFT to the same address",type:"VALIDATION_ERROR"},{status:400});console.log("[TRANSFER API] Calling Dapper Core API...",{nft_id:r,from:t,to:s});let a=await c.Y.transferNFT({nft_id:r,from:t,to:s});return console.log("[TRANSFER API] Dapper Core API response:",a),i.NextResponse.json({success:!0,transaction_hash:a.transaction_hash,status:a.status,transferred_at:a.transferred_at})}catch(e){if(console.error("[TRANSFER API] Error:",e),e instanceof u.z){let r=e.message,t=e.type;switch(e.type){case u.L.AUTHENTICATION_ERROR:r="Authentication failed. Please check API configuration.";break;case u.L.NFT_NOT_FOUND:r="NFT not found or not owned by the specified address.";break;case u.L.INSUFFICIENT_FUNDS:r="Insufficient funds to complete the transfer transaction.";break;case u.L.RATE_LIMIT_EXCEEDED:r="Rate limit exceeded. Please try again later.";break;case u.L.SERVER_ERROR:r="Dapper Core API is temporarily unavailable. Please try again later.";break;case u.L.NETWORK_ERROR:r="Network error occurred. Please check your connection and try again.";break;case u.L.TRANSACTION_FAILED:r="Transfer transaction failed. Please verify ownership and try again."}return i.NextResponse.json({success:!1,error:r,type:t,details:e.details,...e.retryAfter&&{retry_after:e.retryAfter}},{status:e.statusCode||500})}return i.NextResponse.json({success:!1,error:"Internal server error occurred during transfer",type:"INTERNAL_ERROR"},{status:500})}}let R=new a.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/nft/transfer/route",pathname:"/api/nft/transfer",filename:"route",bundlePath:"app/api/nft/transfer/route"},resolvedPagePath:"/home/altcoin-daddy/Downloads/ownly/app/api/nft/transfer/route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:f,workUnitAsyncStorage:l,serverHooks:A}=R;function N(){return(0,o.patchFetch)({workAsyncStorage:f,workUnitAsyncStorage:l})}}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[555,912,700,540],()=>t(85567));module.exports=s})();