/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/nft/mint/route";
exports.ids = ["app/api/nft/mint/route"];
exports.modules = {

/***/ "(rsc)/./app/api/nft/mint/route.ts":
/*!***********************************!*\
  !*** ./app/api/nft/mint/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_dapper_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/dapper/client */ \"(rsc)/./lib/dapper/client.ts\");\n/* harmony import */ var _lib_dapper_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/dapper/config */ \"(rsc)/./lib/dapper/config.ts\");\n/* harmony import */ var _lib_flow_ipfs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/flow/ipfs */ \"(rsc)/./lib/flow/ipfs.ts\");\n/* harmony import */ var _lib_flow_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/flow/config */ \"(rsc)/./lib/flow/config.ts\");\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/errors */ \"(rsc)/./lib/errors/index.ts\");\n/* harmony import */ var _lib_performance_middleware__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/performance/middleware */ \"(rsc)/./lib/performance/middleware.ts\");\n// Enhanced NFT Minting API endpoint with IPFS integration\n\n\n\n\n\n\n\n// Validate Flow address format\nfunction validateFlowAddress(address) {\n    return /^0x[a-fA-F0-9]{16}$/.test(address);\n}\n// Convert base64 to File object\nfunction base64ToFile(base64Data, fileName, fileType) {\n    // Remove data URL prefix if present\n    const base64 = base64Data.replace(/^data:[^;]+;base64,/, '');\n    const byteCharacters = atob(base64);\n    const byteNumbers = new Array(byteCharacters.length);\n    for(let i = 0; i < byteCharacters.length; i++){\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\n    }\n    const byteArray = new Uint8Array(byteNumbers);\n    return new File([\n        byteArray\n    ], fileName, {\n        type: fileType\n    });\n}\nconst POST = (0,_lib_performance_middleware__WEBPACK_IMPORTED_MODULE_6__.trackAPIPerformance)(async function POST(request) {\n    return _lib_errors__WEBPACK_IMPORTED_MODULE_5__.ErrorHandler.handleAsync(async ()=>{\n        const body1 = await request.json();\n        const { recipient } = body1;\n        // Validate recipient address\n        if (!recipient) {\n            throw _lib_errors__WEBPACK_IMPORTED_MODULE_5__.ErrorFactory.createError('MISSING_REQUIRED_FIELD', 'VALIDATION', 'MEDIUM', 'Recipient address is required', 'Please provide a recipient address', {\n                context: {\n                    field: 'recipient'\n                },\n                actionable: true,\n                suggestedActions: [\n                    'Enter a valid Flow address'\n                ]\n            });\n        }\n        if (!validateFlowAddress(recipient)) {\n            throw _lib_errors__WEBPACK_IMPORTED_MODULE_5__.ErrorFactory.invalidAddress(recipient, {\n                endpoint: '/api/nft/mint',\n                operation: 'mint'\n            });\n        }\n        let metadata_url;\n        let image_url;\n        // Check if metadata_url is provided directly (existing flow)\n        if (body1.metadata_url) {\n            metadata_url = body1.metadata_url;\n            // Validate metadata URL format\n            if (!metadata_url.startsWith('https://') && !metadata_url.startsWith('ipfs://')) {\n                throw _lib_errors__WEBPACK_IMPORTED_MODULE_5__.ErrorFactory.createError('INVALID_METADATA', 'VALIDATION', 'MEDIUM', 'Invalid metadata URL format', 'Metadata URL must be a valid HTTPS or IPFS URL', {\n                    context: {\n                        metadata_url,\n                        endpoint: '/api/nft/mint'\n                    },\n                    actionable: true,\n                    suggestedActions: [\n                        'Use a valid HTTPS or IPFS URL for metadata'\n                    ]\n                });\n            }\n        } else if (body1.name && body1.description && body1.category && body1.file_data) {\n            const { name, description, category, creator, file_data, file_name, file_type, attributes, external_url } = body1;\n            // Validate required fields for new flow\n            const metadataValidation = (0,_lib_flow_ipfs__WEBPACK_IMPORTED_MODULE_3__.validateMetadata)({\n                name,\n                description,\n                category,\n                creator: creator || recipient,\n                collection_id: _lib_flow_config__WEBPACK_IMPORTED_MODULE_4__.OWNLY_COLLECTION_ID,\n                attributes,\n                external_url\n            });\n            if (metadataValidation.length > 0) {\n                throw _lib_errors__WEBPACK_IMPORTED_MODULE_5__.ErrorFactory.createError('INVALID_METADATA', 'VALIDATION', 'MEDIUM', `Metadata validation failed: ${metadataValidation.map((e)=>e.message).join(', ')}`, 'Please check your NFT metadata and fix the validation errors', {\n                    context: {\n                        validationErrors: metadataValidation,\n                        endpoint: '/api/nft/mint'\n                    },\n                    actionable: true,\n                    suggestedActions: metadataValidation.map((e)=>`Fix: ${e.message}`)\n                });\n            }\n            try {\n                // Convert base64 to File\n                if (!file_name || !file_type) {\n                    throw _lib_errors__WEBPACK_IMPORTED_MODULE_5__.ErrorFactory.createError('MISSING_REQUIRED_FIELD', 'VALIDATION', 'MEDIUM', 'File name and type are required when uploading file data', 'Please provide both file name and file type', {\n                        context: {\n                            file_name,\n                            file_type,\n                            endpoint: '/api/nft/mint'\n                        },\n                        actionable: true,\n                        suggestedActions: [\n                            'Include file_name and file_type in your request'\n                        ]\n                    });\n                }\n                const file = base64ToFile(file_data, file_name, file_type);\n                // Process and validate the file\n                const { processedFile } = await (0,_lib_flow_ipfs__WEBPACK_IMPORTED_MODULE_3__.processUploadedFile)(file);\n                // Create metadata structure\n                const metadata = (0,_lib_flow_ipfs__WEBPACK_IMPORTED_MODULE_3__.createOwnlyMetadata)({\n                    name,\n                    description,\n                    category,\n                    creator: creator || recipient,\n                    image: processedFile,\n                    attributes,\n                    external_url\n                });\n                // Upload to IPFS with performance tracking\n                console.log('[MINT API] Uploading metadata to IPFS...');\n                const ipfsResult = await (0,_lib_performance_middleware__WEBPACK_IMPORTED_MODULE_6__.measureOperation)('ipfs_upload', async ()=>{\n                    return (0,_lib_flow_ipfs__WEBPACK_IMPORTED_MODULE_3__.uploadToIPFS)(metadata);\n                }, {\n                    file_type: file_type,\n                    file_size: file.size.toString()\n                });\n                metadata_url = ipfsResult.metadataUrl;\n                image_url = ipfsResult.imageUrl;\n                console.log('[MINT API] IPFS upload successful:', {\n                    metadata_url,\n                    image_url\n                });\n            } catch (ipfsError) {\n                console.error('[MINT API] IPFS upload failed:', ipfsError);\n                throw _lib_errors__WEBPACK_IMPORTED_MODULE_5__.ErrorFactory.ipfsUploadFailed(ipfsError instanceof Error ? ipfsError : new Error('Unknown IPFS error'), {\n                    endpoint: '/api/nft/mint',\n                    operation: 'ipfs_upload',\n                    file_name,\n                    file_type\n                });\n            }\n        } else {\n            throw _lib_errors__WEBPACK_IMPORTED_MODULE_5__.ErrorFactory.createError('MISSING_REQUIRED_FIELD', 'VALIDATION', 'MEDIUM', 'Either metadata_url or complete metadata must be provided', 'Please provide either a metadata_url or complete metadata (name, description, category, file_data)', {\n                context: {\n                    endpoint: '/api/nft/mint'\n                },\n                actionable: true,\n                suggestedActions: [\n                    'Provide a metadata_url for existing metadata',\n                    'Or provide name, description, category, and file_data for new metadata'\n                ]\n            });\n        }\n        // Call Dapper Core API to mint NFT with performance tracking\n        console.log('[MINT API] Calling Dapper Core API...');\n        const mintResponse = await (0,_lib_performance_middleware__WEBPACK_IMPORTED_MODULE_6__.trackExternalAPICall)('DapperCore', '/v1/nft/mint', 'POST', ()=>_lib_errors__WEBPACK_IMPORTED_MODULE_5__.ErrorHandler.handleApiCall(()=>_lib_dapper_client__WEBPACK_IMPORTED_MODULE_1__.dapperClient.mintNFT({\n                    metadata_url,\n                    recipient,\n                    collection_id: _lib_dapper_config__WEBPACK_IMPORTED_MODULE_2__.DAPPER_COLLECTION_ID\n                }), '/v1/nft/mint', {\n                endpoint: '/api/nft/mint',\n                operation: 'mint',\n                recipient,\n                metadata_url\n            }));\n        console.log('[MINT API] Dapper Core API response:', mintResponse);\n        // Return successful response\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            nft_id: mintResponse.nft_id,\n            transaction_hash: mintResponse.transaction_hash,\n            status: mintResponse.status,\n            metadata_url,\n            image_url,\n            created_at: mintResponse.created_at\n        });\n    }, {\n        context: {\n            endpoint: '/api/nft/mint',\n            operation: 'mint_nft',\n            recipient: body?.recipient\n        },\n        logError: true,\n        showToUser: false // API errors should be handled by the client\n    }).catch((error)=>{\n        // Convert OwnlyError to API response\n        if (error.code) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: error.userMessage,\n                type: error.code,\n                details: error.context,\n                retryable: error.retryable,\n                ...error.retryAfter && {\n                    retry_after: error.retryAfter\n                }\n            }, {\n                status: error.severity === 'CRITICAL' ? 500 : error.severity === 'HIGH' ? 400 : error.category === 'VALIDATION' ? 400 : 500\n            });\n        }\n        // Fallback for unexpected errors\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: 'Internal server error occurred during minting',\n            type: 'SYSTEM_ERROR'\n        }, {\n            status: 500\n        });\n    });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/nft/mint/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/dapper/client.ts":
/*!******************************!*\
  !*** ./lib/dapper/client.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DapperClient: () => (/* binding */ DapperClient),\n/* harmony export */   dapperClient: () => (/* binding */ dapperClient)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(rsc)/./lib/dapper/types.ts\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"(rsc)/./lib/dapper/config.ts\");\n/* harmony import */ var _lib_performance_collector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/performance/collector */ \"(rsc)/./lib/performance/collector.ts\");\n// Dapper Core API Client\n\n\n\n\nclass DapperClient {\n    async makeRequest(endpoint, options = {}) {\n        // Prevent client-side API calls to Dapper\n        if (this.isClientSide) {\n            throw new Error('Dapper API calls must be made from server-side only. Use API routes instead.');\n        }\n        const startTime = performance.now();\n        const url = `${this.config.baseUrl}${endpoint}`;\n        const method = options.method || 'GET';\n        const defaultHeaders = {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${this.config.apiKey}`,\n            'X-Environment': this.config.environment\n        };\n        const requestOptions = {\n            ...options,\n            headers: {\n                ...defaultHeaders,\n                ...options.headers\n            },\n            signal: AbortSignal.timeout(_config__WEBPACK_IMPORTED_MODULE_1__.DAPPER_REQUEST_TIMEOUT)\n        };\n        let lastError = null;\n        let finalStatusCode = 0;\n        let requestSize;\n        let responseSize;\n        // Calculate request size\n        if (options.body) {\n            requestSize = new Blob([\n                options.body\n            ]).size;\n        }\n        for(let attempt = 1; attempt <= _config__WEBPACK_IMPORTED_MODULE_1__.DAPPER_RETRY_ATTEMPTS; attempt++){\n            try {\n                const response = await fetch(url, requestOptions);\n                finalStatusCode = response.status;\n                // Calculate response size\n                const contentLength = response.headers.get('content-length');\n                if (contentLength) {\n                    responseSize = parseInt(contentLength);\n                }\n                if (!response.ok) {\n                    const errorData = await this.parseErrorResponse(response);\n                    throw new _types__WEBPACK_IMPORTED_MODULE_0__.DapperAPIError(errorData);\n                }\n                const data = await response.json();\n                // Record successful API call performance\n                const responseTime = performance.now() - startTime;\n                await _lib_performance_collector__WEBPACK_IMPORTED_MODULE_2__.performanceCollector.recordAPIMetric({\n                    endpoint: `DapperCore${endpoint}`,\n                    method: method,\n                    statusCode: finalStatusCode,\n                    responseTime,\n                    requestSize,\n                    responseSize,\n                    tags: {\n                        external_api: 'DapperCore',\n                        api_type: 'external',\n                        attempt: attempt.toString(),\n                        success: 'true'\n                    }\n                });\n                return data;\n            } catch (error) {\n                lastError = error;\n                // Don't retry on client errors (4xx) except rate limiting\n                if (error instanceof _types__WEBPACK_IMPORTED_MODULE_0__.DapperAPIError) {\n                    if (error.statusCode && error.statusCode >= 400 && error.statusCode < 500) {\n                        if (error.type !== 'RATE_LIMIT_EXCEEDED') {\n                            // Record failed API call\n                            const responseTime = performance.now() - startTime;\n                            await _lib_performance_collector__WEBPACK_IMPORTED_MODULE_2__.performanceCollector.recordAPIMetric({\n                                endpoint: `DapperCore${endpoint}`,\n                                method: method,\n                                statusCode: error.statusCode,\n                                responseTime,\n                                requestSize,\n                                responseSize,\n                                tags: {\n                                    external_api: 'DapperCore',\n                                    api_type: 'external',\n                                    attempt: attempt.toString(),\n                                    success: 'false',\n                                    error: error.message,\n                                    error_type: error.type\n                                }\n                            });\n                            throw error;\n                        }\n                    }\n                }\n                // Wait before retry with exponential backoff\n                if (attempt < _config__WEBPACK_IMPORTED_MODULE_1__.DAPPER_RETRY_ATTEMPTS) {\n                    const delay = _config__WEBPACK_IMPORTED_MODULE_1__.DAPPER_RETRY_DELAY * Math.pow(2, attempt - 1);\n                    await new Promise((resolve)=>setTimeout(resolve, delay));\n                }\n            }\n        }\n        // Record final failed attempt\n        const responseTime = performance.now() - startTime;\n        await _lib_performance_collector__WEBPACK_IMPORTED_MODULE_2__.performanceCollector.recordAPIMetric({\n            endpoint: `DapperCore${endpoint}`,\n            method: method,\n            statusCode: finalStatusCode || 500,\n            responseTime,\n            requestSize,\n            responseSize,\n            tags: {\n                external_api: 'DapperCore',\n                api_type: 'external',\n                attempt: _config__WEBPACK_IMPORTED_MODULE_1__.DAPPER_RETRY_ATTEMPTS.toString(),\n                success: 'false',\n                error: lastError?.message || 'Unknown error',\n                exhausted_retries: 'true'\n            }\n        });\n        throw lastError || new Error('Request failed after all retry attempts');\n    }\n    async parseErrorResponse(response) {\n        let errorType;\n        let message = 'Unknown error occurred';\n        let details = null;\n        try {\n            const errorData = await response.json();\n            message = errorData.message || errorData.error || message;\n            details = errorData.details || errorData;\n        } catch  {\n            // If we can't parse the error response, use status text\n            message = response.statusText || message;\n        }\n        // Map HTTP status codes to error types\n        switch(response.status){\n            case 400:\n                errorType = _types__WEBPACK_IMPORTED_MODULE_0__.DapperErrorType.INVALID_REQUEST;\n                break;\n            case 401:\n            case 403:\n                errorType = _types__WEBPACK_IMPORTED_MODULE_0__.DapperErrorType.AUTHENTICATION_ERROR;\n                break;\n            case 404:\n                errorType = _types__WEBPACK_IMPORTED_MODULE_0__.DapperErrorType.NFT_NOT_FOUND;\n                break;\n            case 429:\n                errorType = _types__WEBPACK_IMPORTED_MODULE_0__.DapperErrorType.RATE_LIMIT_EXCEEDED;\n                break;\n            case 500:\n            case 502:\n            case 503:\n            case 504:\n                errorType = _types__WEBPACK_IMPORTED_MODULE_0__.DapperErrorType.SERVER_ERROR;\n                break;\n            default:\n                errorType = _types__WEBPACK_IMPORTED_MODULE_0__.DapperErrorType.NETWORK_ERROR;\n        }\n        return {\n            type: errorType,\n            message,\n            details,\n            status_code: response.status,\n            retry_after: response.headers.get('Retry-After') ? parseInt(response.headers.get('Retry-After')) : undefined\n        };\n    }\n    // NFT Minting\n    async mintNFT(request) {\n        return this.makeRequest(_config__WEBPACK_IMPORTED_MODULE_1__.DAPPER_ENDPOINTS.MINT, {\n            method: 'POST',\n            body: JSON.stringify(request)\n        });\n    }\n    // NFT Transfer\n    async transferNFT(request) {\n        return this.makeRequest(_config__WEBPACK_IMPORTED_MODULE_1__.DAPPER_ENDPOINTS.TRANSFER, {\n            method: 'POST',\n            body: JSON.stringify(request)\n        });\n    }\n    // Marketplace Listing\n    async listNFT(request) {\n        return this.makeRequest(_config__WEBPACK_IMPORTED_MODULE_1__.DAPPER_ENDPOINTS.MARKETPLACE_LIST, {\n            method: 'POST',\n            body: JSON.stringify(request)\n        });\n    }\n    // Marketplace Purchase\n    async buyNFT(request) {\n        return this.makeRequest(_config__WEBPACK_IMPORTED_MODULE_1__.DAPPER_ENDPOINTS.MARKETPLACE_BUY, {\n            method: 'POST',\n            body: JSON.stringify(request)\n        });\n    }\n    // Get User NFTs\n    async getUserNFTs(address) {\n        return this.makeRequest(`${_config__WEBPACK_IMPORTED_MODULE_1__.DAPPER_ENDPOINTS.USER}/${address}`);\n    }\n    // Get Events\n    async getEvents(cursor) {\n        const params = cursor ? `?cursor=${cursor}` : '';\n        return this.makeRequest(`${_config__WEBPACK_IMPORTED_MODULE_1__.DAPPER_ENDPOINTS.EVENTS}${params}`);\n    }\n    // Get Marketplace Listings\n    async getMarketplaceListings(queryParams) {\n        const params = queryParams ? `?${queryParams}` : '';\n        return this.makeRequest(`${_config__WEBPACK_IMPORTED_MODULE_1__.DAPPER_ENDPOINTS.MARKETPLACE}${params}`);\n    }\n    constructor(){\n        this.config = (0,_config__WEBPACK_IMPORTED_MODULE_1__.getDapperConfig)();\n        this.isClientSide = \"undefined\" !== 'undefined';\n    }\n}\n// Export singleton instance\nconst dapperClient = new DapperClient();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/dapper/client.ts\n");

/***/ }),

/***/ "(rsc)/./lib/dapper/config.ts":
/*!******************************!*\
  !*** ./lib/dapper/config.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DAPPER_COLLECTION_ID: () => (/* binding */ DAPPER_COLLECTION_ID),\n/* harmony export */   DAPPER_ENDPOINTS: () => (/* binding */ DAPPER_ENDPOINTS),\n/* harmony export */   DAPPER_REQUEST_TIMEOUT: () => (/* binding */ DAPPER_REQUEST_TIMEOUT),\n/* harmony export */   DAPPER_RETRY_ATTEMPTS: () => (/* binding */ DAPPER_RETRY_ATTEMPTS),\n/* harmony export */   DAPPER_RETRY_DELAY: () => (/* binding */ DAPPER_RETRY_DELAY),\n/* harmony export */   getDapperConfig: () => (/* binding */ getDapperConfig)\n/* harmony export */ });\n// Dapper Core API Configuration\nfunction getDapperConfig() {\n    const baseUrl = \"https://api.dapper.com\" || 0;\n    const apiKey = process.env.DAPPER_API_KEY;\n    const environment = \"testnet\" || 0;\n    // Check if we're running on the client side\n    const isClientSide = \"undefined\" !== 'undefined';\n    if (!baseUrl) {\n        if (isClientSide) {\n            // On client side, use a default URL if not provided\n            console.warn('DAPPER_API_URL not available on client side, using default');\n        } else {\n            throw new Error('DAPPER_API_URL environment variable is required');\n        }\n    }\n    if (!apiKey) {\n        if (isClientSide) {\n            // On client side, use a placeholder key\n            console.warn('DAPPER_API_KEY not available on client side, using placeholder');\n        } else {\n            throw new Error('DAPPER_API_KEY environment variable is required');\n        }\n    }\n    return {\n        baseUrl: (baseUrl || 'https://api.dapper.com').endsWith('/') ? (baseUrl || 'https://api.dapper.com').slice(0, -1) : baseUrl || 'https://api.dapper.com',\n        apiKey: apiKey || 'client-side-placeholder',\n        environment\n    };\n}\nconst DAPPER_ENDPOINTS = {\n    MINT: '/v1/nft/mint',\n    TRANSFER: '/v1/nft/transfer',\n    MARKETPLACE_LIST: '/v1/marketplace/list',\n    MARKETPLACE_BUY: '/v1/marketplace/buy',\n    MARKETPLACE: '/v1/marketplace',\n    USER: '/v1/user',\n    EVENTS: '/v1/events'\n};\nconst DAPPER_COLLECTION_ID = 'ownly_collectibles';\n// Request timeout configuration\nconst DAPPER_REQUEST_TIMEOUT = 30000 // 30 seconds\n;\nconst DAPPER_RETRY_ATTEMPTS = 3;\nconst DAPPER_RETRY_DELAY = 1000 // 1 second base delay\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZGFwcGVyL2NvbmZpZy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxnQ0FBZ0M7QUFJekIsU0FBU0E7SUFDZCxNQUFNQyxVQUFVQyx3QkFBc0MsSUFBSUEsQ0FBMEI7SUFDcEYsTUFBTUksU0FBU0osUUFBUUMsR0FBRyxDQUFDSSxjQUFjO0lBQ3pDLE1BQU1DLGNBQWVOLFNBQW9DLElBQUksQ0FBUztJQUV0RSw0Q0FBNEM7SUFDNUMsTUFBTVEsZUFBZSxnQkFBa0I7SUFFdkMsSUFBSSxDQUFDVCxTQUFTO1FBQ1osSUFBSVMsY0FBYztZQUNoQixvREFBb0Q7WUFDcERDLFFBQVFDLElBQUksQ0FBQztRQUNmLE9BQU87WUFDTCxNQUFNLElBQUlDLE1BQU07UUFDbEI7SUFDRjtJQUVBLElBQUksQ0FBQ1AsUUFBUTtRQUNYLElBQUlJLGNBQWM7WUFDaEIsd0NBQXdDO1lBQ3hDQyxRQUFRQyxJQUFJLENBQUM7UUFDZixPQUFPO1lBQ0wsTUFBTSxJQUFJQyxNQUFNO1FBQ2xCO0lBQ0Y7SUFFQSxPQUFPO1FBQ0xaLFNBQVMsQ0FBQ0EsV0FBVyx3QkFBdUIsRUFBR2EsUUFBUSxDQUFDLE9BQ3BELENBQUNiLFdBQVcsd0JBQXVCLEVBQUdjLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FDL0NkLFdBQVc7UUFDaEJLLFFBQVFBLFVBQVU7UUFDbEJFO0lBQ0Y7QUFDRjtBQUVPLE1BQU1RLG1CQUFtQjtJQUM5QkMsTUFBTTtJQUNOQyxVQUFVO0lBQ1ZDLGtCQUFrQjtJQUNsQkMsaUJBQWlCO0lBQ2pCQyxhQUFhO0lBQ2JDLE1BQU07SUFDTkMsUUFBUTtBQUNWLEVBQVU7QUFFSCxNQUFNQyx1QkFBdUIscUJBQW9CO0FBRXhELGdDQUFnQztBQUN6QixNQUFNQyx5QkFBeUIsTUFBTSxhQUFhO0NBQWQ7QUFDcEMsTUFBTUMsd0JBQXdCLEVBQUM7QUFDL0IsTUFBTUMscUJBQXFCLEtBQUssc0JBQXNCO0NBQXZCIiwic291cmNlcyI6WyIvaG9tZS9hbHRjb2luLWRhZGR5L0Rvd25sb2Fkcy9vd25seS9saWIvZGFwcGVyL2NvbmZpZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEYXBwZXIgQ29yZSBBUEkgQ29uZmlndXJhdGlvblxuXG5pbXBvcnQgdHlwZSB7IERhcHBlckNvbmZpZyB9IGZyb20gJy4vdHlwZXMnXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXBwZXJDb25maWcoKTogRGFwcGVyQ29uZmlnIHtcbiAgY29uc3QgYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0RBUFBFUl9BUElfVVJMIHx8IHByb2Nlc3MuZW52LkRBUFBFUl9BUElfVVJMXG4gIGNvbnN0IGFwaUtleSA9IHByb2Nlc3MuZW52LkRBUFBFUl9BUElfS0VZXG4gIGNvbnN0IGVudmlyb25tZW50ID0gKHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0ZMT1dfTkVUV09SSyB8fCAndGVzdG5ldCcpIGFzICd0ZXN0bmV0JyB8ICdtYWlubmV0J1xuXG4gIC8vIENoZWNrIGlmIHdlJ3JlIHJ1bm5pbmcgb24gdGhlIGNsaWVudCBzaWRlXG4gIGNvbnN0IGlzQ2xpZW50U2lkZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gIFxuICBpZiAoIWJhc2VVcmwpIHtcbiAgICBpZiAoaXNDbGllbnRTaWRlKSB7XG4gICAgICAvLyBPbiBjbGllbnQgc2lkZSwgdXNlIGEgZGVmYXVsdCBVUkwgaWYgbm90IHByb3ZpZGVkXG4gICAgICBjb25zb2xlLndhcm4oJ0RBUFBFUl9BUElfVVJMIG5vdCBhdmFpbGFibGUgb24gY2xpZW50IHNpZGUsIHVzaW5nIGRlZmF1bHQnKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RBUFBFUl9BUElfVVJMIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIHJlcXVpcmVkJylcbiAgICB9XG4gIH1cblxuICBpZiAoIWFwaUtleSkge1xuICAgIGlmIChpc0NsaWVudFNpZGUpIHtcbiAgICAgIC8vIE9uIGNsaWVudCBzaWRlLCB1c2UgYSBwbGFjZWhvbGRlciBrZXlcbiAgICAgIGNvbnNvbGUud2FybignREFQUEVSX0FQSV9LRVkgbm90IGF2YWlsYWJsZSBvbiBjbGllbnQgc2lkZSwgdXNpbmcgcGxhY2Vob2xkZXInKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RBUFBFUl9BUElfS0VZIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIHJlcXVpcmVkJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJhc2VVcmw6IChiYXNlVXJsIHx8ICdodHRwczovL2FwaS5kYXBwZXIuY29tJykuZW5kc1dpdGgoJy8nKSBcbiAgICAgID8gKGJhc2VVcmwgfHwgJ2h0dHBzOi8vYXBpLmRhcHBlci5jb20nKS5zbGljZSgwLCAtMSkgXG4gICAgICA6IChiYXNlVXJsIHx8ICdodHRwczovL2FwaS5kYXBwZXIuY29tJyksXG4gICAgYXBpS2V5OiBhcGlLZXkgfHwgJ2NsaWVudC1zaWRlLXBsYWNlaG9sZGVyJyxcbiAgICBlbnZpcm9ubWVudFxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBEQVBQRVJfRU5EUE9JTlRTID0ge1xuICBNSU5UOiAnL3YxL25mdC9taW50JyxcbiAgVFJBTlNGRVI6ICcvdjEvbmZ0L3RyYW5zZmVyJyxcbiAgTUFSS0VUUExBQ0VfTElTVDogJy92MS9tYXJrZXRwbGFjZS9saXN0JyxcbiAgTUFSS0VUUExBQ0VfQlVZOiAnL3YxL21hcmtldHBsYWNlL2J1eScsXG4gIE1BUktFVFBMQUNFOiAnL3YxL21hcmtldHBsYWNlJyxcbiAgVVNFUjogJy92MS91c2VyJyxcbiAgRVZFTlRTOiAnL3YxL2V2ZW50cydcbn0gYXMgY29uc3RcblxuZXhwb3J0IGNvbnN0IERBUFBFUl9DT0xMRUNUSU9OX0lEID0gJ293bmx5X2NvbGxlY3RpYmxlcydcblxuLy8gUmVxdWVzdCB0aW1lb3V0IGNvbmZpZ3VyYXRpb25cbmV4cG9ydCBjb25zdCBEQVBQRVJfUkVRVUVTVF9USU1FT1VUID0gMzAwMDAgLy8gMzAgc2Vjb25kc1xuZXhwb3J0IGNvbnN0IERBUFBFUl9SRVRSWV9BVFRFTVBUUyA9IDNcbmV4cG9ydCBjb25zdCBEQVBQRVJfUkVUUllfREVMQVkgPSAxMDAwIC8vIDEgc2Vjb25kIGJhc2UgZGVsYXkiXSwibmFtZXMiOlsiZ2V0RGFwcGVyQ29uZmlnIiwiYmFzZVVybCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19EQVBQRVJfQVBJX1VSTCIsIkRBUFBFUl9BUElfVVJMIiwiYXBpS2V5IiwiREFQUEVSX0FQSV9LRVkiLCJlbnZpcm9ubWVudCIsIk5FWFRfUFVCTElDX0ZMT1dfTkVUV09SSyIsImlzQ2xpZW50U2lkZSIsImNvbnNvbGUiLCJ3YXJuIiwiRXJyb3IiLCJlbmRzV2l0aCIsInNsaWNlIiwiREFQUEVSX0VORFBPSU5UUyIsIk1JTlQiLCJUUkFOU0ZFUiIsIk1BUktFVFBMQUNFX0xJU1QiLCJNQVJLRVRQTEFDRV9CVVkiLCJNQVJLRVRQTEFDRSIsIlVTRVIiLCJFVkVOVFMiLCJEQVBQRVJfQ09MTEVDVElPTl9JRCIsIkRBUFBFUl9SRVFVRVNUX1RJTUVPVVQiLCJEQVBQRVJfUkVUUllfQVRURU1QVFMiLCJEQVBQRVJfUkVUUllfREVMQVkiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/dapper/config.ts\n");

/***/ }),

/***/ "(rsc)/./lib/dapper/types.ts":
/*!*****************************!*\
  !*** ./lib/dapper/types.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DapperAPIError: () => (/* binding */ DapperAPIError),\n/* harmony export */   DapperErrorType: () => (/* binding */ DapperErrorType)\n/* harmony export */ });\n// Dapper Core API Types and Interfaces\n// Error Types\nvar DapperErrorType = /*#__PURE__*/ function(DapperErrorType) {\n    DapperErrorType[\"AUTHENTICATION_ERROR\"] = \"AUTHENTICATION_ERROR\";\n    DapperErrorType[\"INVALID_REQUEST\"] = \"INVALID_REQUEST\";\n    DapperErrorType[\"NFT_NOT_FOUND\"] = \"NFT_NOT_FOUND\";\n    DapperErrorType[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    DapperErrorType[\"TRANSACTION_FAILED\"] = \"TRANSACTION_FAILED\";\n    DapperErrorType[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    DapperErrorType[\"RATE_LIMIT_EXCEEDED\"] = \"RATE_LIMIT_EXCEEDED\";\n    DapperErrorType[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    return DapperErrorType;\n}({});\nclass DapperAPIError extends Error {\n    constructor(error){\n        super(error.message);\n        this.name = 'DapperAPIError';\n        this.type = error.type;\n        this.details = error.details;\n        this.retryAfter = error.retry_after;\n        this.statusCode = error.status_code;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZGFwcGVyL3R5cGVzLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsdUNBQXVDO0FBa0d2QyxjQUFjO0FBQ1AsNkNBQUtBOzs7Ozs7Ozs7V0FBQUE7TUFTWDtBQVVNLE1BQU1DLHVCQUF1QkM7SUFNbENDLFlBQVlDLEtBQWtCLENBQUU7UUFDOUIsS0FBSyxDQUFDQSxNQUFNQyxPQUFPO1FBQ25CLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDQyxJQUFJLEdBQUdILE1BQU1HLElBQUk7UUFDdEIsSUFBSSxDQUFDQyxPQUFPLEdBQUdKLE1BQU1JLE9BQU87UUFDNUIsSUFBSSxDQUFDQyxVQUFVLEdBQUdMLE1BQU1NLFdBQVc7UUFDbkMsSUFBSSxDQUFDQyxVQUFVLEdBQUdQLE1BQU1RLFdBQVc7SUFDckM7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvYWx0Y29pbi1kYWRkeS9Eb3dubG9hZHMvb3dubHkvbGliL2RhcHBlci90eXBlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEYXBwZXIgQ29yZSBBUEkgVHlwZXMgYW5kIEludGVyZmFjZXNcblxuZXhwb3J0IGludGVyZmFjZSBEYXBwZXJDb25maWcge1xuICBiYXNlVXJsOiBzdHJpbmdcbiAgYXBpS2V5OiBzdHJpbmdcbiAgZW52aXJvbm1lbnQ6ICd0ZXN0bmV0JyB8ICdtYWlubmV0J1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhcHBlck1pbnRSZXF1ZXN0IHtcbiAgbWV0YWRhdGFfdXJsOiBzdHJpbmdcbiAgcmVjaXBpZW50OiBzdHJpbmdcbiAgY29sbGVjdGlvbl9pZDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGFwcGVyTWludFJlc3BvbnNlIHtcbiAgbmZ0X2lkOiBzdHJpbmdcbiAgdHJhbnNhY3Rpb25faGFzaDogc3RyaW5nXG4gIHN0YXR1czogJ3BlbmRpbmcnIHwgJ2NvbXBsZXRlZCcgfCAnZmFpbGVkJ1xuICBjcmVhdGVkX2F0OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXBwZXJUcmFuc2ZlclJlcXVlc3Qge1xuICBuZnRfaWQ6IHN0cmluZ1xuICBmcm9tOiBzdHJpbmdcbiAgdG86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhcHBlclRyYW5zZmVyUmVzcG9uc2Uge1xuICB0cmFuc2FjdGlvbl9oYXNoOiBzdHJpbmdcbiAgc3RhdHVzOiAncGVuZGluZycgfCAnY29tcGxldGVkJyB8ICdmYWlsZWQnXG4gIHRyYW5zZmVycmVkX2F0OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXBwZXJNYXJrZXRwbGFjZUxpc3RSZXF1ZXN0IHtcbiAgbmZ0X2lkOiBzdHJpbmdcbiAgcHJpY2U6IG51bWJlclxuICBjdXJyZW5jeTogJ0ZMT1cnXG4gIHNlbGxlcjogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGFwcGVyTWFya2V0cGxhY2VCdXlSZXF1ZXN0IHtcbiAgbmZ0X2lkOiBzdHJpbmdcbiAgYnV5ZXI6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhcHBlck1hcmtldHBsYWNlUmVzcG9uc2Uge1xuICB0cmFuc2FjdGlvbl9oYXNoOiBzdHJpbmdcbiAgc3RhdHVzOiAncGVuZGluZycgfCAnY29tcGxldGVkJyB8ICdmYWlsZWQnXG4gIHByb2Nlc3NlZF9hdDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGFwcGVyVXNlclJlc3BvbnNlIHtcbiAgYWRkcmVzczogc3RyaW5nXG4gIG5mdHM6IEFycmF5PHtcbiAgICBuZnRfaWQ6IHN0cmluZ1xuICAgIG1ldGFkYXRhX3VybDogc3RyaW5nXG4gICAgY29sbGVjdGlvbl9pZDogc3RyaW5nXG4gICAgb3duZWRfYXQ6IHN0cmluZ1xuICB9PlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhcHBlckV2ZW50c1Jlc3BvbnNlIHtcbiAgZXZlbnRzOiBBcnJheTx7XG4gICAgZXZlbnRfdHlwZTogc3RyaW5nXG4gICAgbmZ0X2lkPzogc3RyaW5nXG4gICAgdHJhbnNhY3Rpb25faGFzaDogc3RyaW5nXG4gICAgYmxvY2tfaGVpZ2h0OiBudW1iZXJcbiAgICB0aW1lc3RhbXA6IHN0cmluZ1xuICAgIGRhdGE6IGFueVxuICB9PlxuICBjdXJzb3I/OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXBwZXJNYXJrZXRwbGFjZUxpc3RpbmdzUmVzcG9uc2Uge1xuICBsaXN0aW5nczogQXJyYXk8e1xuICAgIGxpc3RpbmdfaWQ6IHN0cmluZ1xuICAgIG5mdF9pZDogc3RyaW5nXG4gICAgcHJpY2U6IG51bWJlclxuICAgIGN1cnJlbmN5OiAnRkxPVydcbiAgICBzZWxsZXI6IHN0cmluZ1xuICAgIHN0YXR1czogJ2FjdGl2ZScgfCAnc29sZCcgfCAnY2FuY2VsbGVkJ1xuICAgIGNyZWF0ZWRfYXQ6IHN0cmluZ1xuICAgIG5mdF9tZXRhZGF0YT86IHtcbiAgICAgIG5hbWU6IHN0cmluZ1xuICAgICAgZGVzY3JpcHRpb246IHN0cmluZ1xuICAgICAgaW1hZ2U6IHN0cmluZ1xuICAgICAgbWV0YWRhdGFfdXJsOiBzdHJpbmdcbiAgICAgIGNvbGxlY3Rpb25faWQ6IHN0cmluZ1xuICAgICAgY3JlYXRvcjogc3RyaW5nXG4gICAgfVxuICB9PlxuICBwYWdpbmF0aW9uOiB7XG4gICAgY3Vyc29yPzogc3RyaW5nXG4gICAgaGFzX21vcmU6IGJvb2xlYW5cbiAgICB0b3RhbF9jb3VudD86IG51bWJlclxuICB9XG59XG5cbi8vIEVycm9yIFR5cGVzXG5leHBvcnQgZW51bSBEYXBwZXJFcnJvclR5cGUge1xuICBBVVRIRU5USUNBVElPTl9FUlJPUiA9ICdBVVRIRU5USUNBVElPTl9FUlJPUicsXG4gIElOVkFMSURfUkVRVUVTVCA9ICdJTlZBTElEX1JFUVVFU1QnLFxuICBORlRfTk9UX0ZPVU5EID0gJ05GVF9OT1RfRk9VTkQnLFxuICBJTlNVRkZJQ0lFTlRfRlVORFMgPSAnSU5TVUZGSUNJRU5UX0ZVTkRTJyxcbiAgVFJBTlNBQ1RJT05fRkFJTEVEID0gJ1RSQU5TQUNUSU9OX0ZBSUxFRCcsXG4gIE5FVFdPUktfRVJST1IgPSAnTkVUV09SS19FUlJPUicsXG4gIFJBVEVfTElNSVRfRVhDRUVERUQgPSAnUkFURV9MSU1JVF9FWENFRURFRCcsXG4gIFNFUlZFUl9FUlJPUiA9ICdTRVJWRVJfRVJST1InXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGFwcGVyRXJyb3Ige1xuICB0eXBlOiBEYXBwZXJFcnJvclR5cGVcbiAgbWVzc2FnZTogc3RyaW5nXG4gIGRldGFpbHM/OiBhbnlcbiAgcmV0cnlfYWZ0ZXI/OiBudW1iZXJcbiAgc3RhdHVzX2NvZGU/OiBudW1iZXJcbn1cblxuZXhwb3J0IGNsYXNzIERhcHBlckFQSUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogRGFwcGVyRXJyb3JUeXBlXG4gIHB1YmxpYyByZWFkb25seSBkZXRhaWxzPzogYW55XG4gIHB1YmxpYyByZWFkb25seSByZXRyeUFmdGVyPzogbnVtYmVyXG4gIHB1YmxpYyByZWFkb25seSBzdGF0dXNDb2RlPzogbnVtYmVyXG5cbiAgY29uc3RydWN0b3IoZXJyb3I6IERhcHBlckVycm9yKSB7XG4gICAgc3VwZXIoZXJyb3IubWVzc2FnZSlcbiAgICB0aGlzLm5hbWUgPSAnRGFwcGVyQVBJRXJyb3InXG4gICAgdGhpcy50eXBlID0gZXJyb3IudHlwZVxuICAgIHRoaXMuZGV0YWlscyA9IGVycm9yLmRldGFpbHNcbiAgICB0aGlzLnJldHJ5QWZ0ZXIgPSBlcnJvci5yZXRyeV9hZnRlclxuICAgIHRoaXMuc3RhdHVzQ29kZSA9IGVycm9yLnN0YXR1c19jb2RlXG4gIH1cbn0iXSwibmFtZXMiOlsiRGFwcGVyRXJyb3JUeXBlIiwiRGFwcGVyQVBJRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiZXJyb3IiLCJtZXNzYWdlIiwibmFtZSIsInR5cGUiLCJkZXRhaWxzIiwicmV0cnlBZnRlciIsInJldHJ5X2FmdGVyIiwic3RhdHVzQ29kZSIsInN0YXR1c19jb2RlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/dapper/types.ts\n");

/***/ }),

/***/ "(rsc)/./lib/errors/error-factory.ts":
/*!*************************************!*\
  !*** ./lib/errors/error-factory.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorFactory: () => (/* binding */ ErrorFactory)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(rsc)/./lib/errors/types.ts\");\n/* harmony import */ var _lib_dapper_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/dapper/types */ \"(rsc)/./lib/dapper/types.ts\");\n// Error Factory for creating standardized errors\n\n\nclass ErrorFactory {\n    static createError(code, category, severity, message, userMessage, options = {}) {\n        const details = {\n            code,\n            category,\n            severity,\n            message,\n            userMessage,\n            retryable: options.retryable ?? false,\n            actionable: options.actionable ?? false,\n            ...options\n        };\n        return new _types__WEBPACK_IMPORTED_MODULE_0__.OwnlyError(details);\n    }\n    // Wallet Errors\n    static walletNotConnected(context) {\n        return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.WALLET_NOT_CONNECTED, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.WALLET, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.MEDIUM, 'Wallet is not connected', 'Please connect your wallet to continue', {\n            context,\n            actionable: true,\n            suggestedActions: [\n                'Click \"Connect Wallet\" button',\n                'Ensure your wallet extension is installed'\n            ],\n            helpUrl: '/help/wallet-connection'\n        });\n    }\n    static walletConnectionFailed(originalError, context) {\n        return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.WALLET_CONNECTION_FAILED, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.WALLET, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.HIGH, 'Failed to connect to wallet', 'Unable to connect to your wallet. Please try again.', {\n            context,\n            originalError,\n            retryable: true,\n            actionable: true,\n            suggestedActions: [\n                'Refresh the page and try again',\n                'Check if your wallet extension is unlocked',\n                'Try switching to a different wallet'\n            ],\n            helpUrl: '/help/wallet-troubleshooting'\n        });\n    }\n    static walletSignatureRejected(context) {\n        return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.WALLET_SIGNATURE_REJECTED, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.WALLET, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.MEDIUM, 'Transaction signature was rejected by user', 'Transaction cancelled. You rejected the signature request.', {\n            context,\n            actionable: true,\n            suggestedActions: [\n                'Try the transaction again and approve the signature'\n            ],\n            helpUrl: '/help/transaction-signing'\n        });\n    }\n    static insufficientFunds(balance, required, context) {\n        const balanceInfo = balance && required ? ` (Balance: ${balance}, Required: ${required})` : '';\n        return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.WALLET_INSUFFICIENT_FUNDS, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.WALLET, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.HIGH, `Insufficient funds for transaction${balanceInfo}`, 'You don\\'t have enough FLOW tokens to complete this transaction.', {\n            context: {\n                ...context,\n                balance,\n                required\n            },\n            actionable: true,\n            suggestedActions: [\n                'Add more FLOW tokens to your wallet',\n                'Try a transaction with a lower amount'\n            ],\n            helpUrl: '/help/add-funds'\n        });\n    }\n    // Transaction Errors\n    static transactionFailed(transactionId, originalError, context) {\n        return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.TRANSACTION_FAILED, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.TRANSACTION, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.HIGH, 'Blockchain transaction failed', 'Your transaction failed to complete. Please try again.', {\n            context: {\n                ...context,\n                transactionId\n            },\n            originalError,\n            retryable: true,\n            actionable: true,\n            suggestedActions: [\n                'Wait a moment and try again',\n                'Check your wallet balance',\n                'Contact support if the issue persists'\n            ],\n            helpUrl: '/help/transaction-issues'\n        });\n    }\n    static transactionTimeout(transactionId, context) {\n        return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.TRANSACTION_TIMEOUT, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.TRANSACTION, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.MEDIUM, 'Transaction timed out', 'Your transaction is taking longer than expected. It may still complete.', {\n            context: {\n                ...context,\n                transactionId\n            },\n            retryable: true,\n            actionable: true,\n            suggestedActions: [\n                'Check your transaction status in a few minutes',\n                'Try the transaction again if it doesn\\'t complete'\n            ],\n            helpUrl: '/help/transaction-status'\n        });\n    }\n    // API Errors\n    static apiTimeout(endpoint, context) {\n        return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.API_TIMEOUT, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.API, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.MEDIUM, 'API request timed out', 'The request is taking longer than expected. Please try again.', {\n            context: {\n                ...context,\n                endpoint\n            },\n            retryable: true,\n            retryAfter: 5000,\n            actionable: true,\n            suggestedActions: [\n                'Wait a moment and try again',\n                'Check your internet connection'\n            ]\n        });\n    }\n    static apiRateLimited(retryAfter, context) {\n        const retryMessage = retryAfter ? ` Please wait ${Math.ceil(retryAfter / 1000)} seconds.` : '';\n        return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.API_RATE_LIMITED, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.API, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.MEDIUM, 'API rate limit exceeded', `Too many requests. Please slow down.${retryMessage}`, {\n            context,\n            retryable: true,\n            retryAfter,\n            actionable: true,\n            suggestedActions: [\n                'Wait before making another request',\n                'Reduce the frequency of your actions'\n            ]\n        });\n    }\n    // Validation Errors\n    static invalidAddress(address, context) {\n        return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.INVALID_ADDRESS, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.VALIDATION, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.MEDIUM, 'Invalid Flow address format', 'Please enter a valid Flow address (0x followed by 16 hexadecimal characters)', {\n            context: {\n                ...context,\n                address\n            },\n            actionable: true,\n            suggestedActions: [\n                'Check the address format',\n                'Copy the address from a trusted source'\n            ],\n            helpUrl: '/help/flow-addresses'\n        });\n    }\n    static invalidNFTId(nftId, context) {\n        return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.INVALID_NFT_ID, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.VALIDATION, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.MEDIUM, 'Invalid NFT ID', 'The NFT ID provided is not valid', {\n            context: {\n                ...context,\n                nftId\n            },\n            actionable: true,\n            suggestedActions: [\n                'Check the NFT ID',\n                'Refresh the page and try again'\n            ]\n        });\n    }\n    // IPFS Errors\n    static ipfsUploadFailed(originalError, context) {\n        return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.IPFS_UPLOAD_FAILED, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.IPFS, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.HIGH, 'Failed to upload to IPFS', 'Unable to upload your file. Please try again.', {\n            context,\n            originalError,\n            retryable: true,\n            actionable: true,\n            suggestedActions: [\n                'Check your internet connection',\n                'Try uploading a smaller file',\n                'Wait a moment and try again'\n            ],\n            helpUrl: '/help/file-upload'\n        });\n    }\n    // Marketplace Errors\n    static nftNotForSale(nftId, context) {\n        return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.NFT_NOT_FOR_SALE, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.MARKETPLACE, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.MEDIUM, 'NFT is not listed for sale', 'This NFT is not currently available for purchase', {\n            context: {\n                ...context,\n                nftId\n            },\n            actionable: true,\n            suggestedActions: [\n                'Browse other available NFTs',\n                'Check back later'\n            ]\n        });\n    }\n    static nftAlreadySold(nftId, context) {\n        return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.NFT_ALREADY_SOLD, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.MARKETPLACE, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.MEDIUM, 'NFT has already been sold', 'Someone else purchased this NFT before you', {\n            context: {\n                ...context,\n                nftId\n            },\n            actionable: true,\n            suggestedActions: [\n                'Browse other available NFTs',\n                'Set up alerts for similar NFTs'\n            ]\n        });\n    }\n    // Network Errors\n    static networkError(originalError, context) {\n        return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.NETWORK_ERROR, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.NETWORK, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.HIGH, 'Network connection error', 'Unable to connect to the network. Please check your internet connection.', {\n            context,\n            originalError,\n            retryable: true,\n            actionable: true,\n            suggestedActions: [\n                'Check your internet connection',\n                'Try refreshing the page',\n                'Wait a moment and try again'\n            ]\n        });\n    }\n    // System Errors\n    static systemError(originalError, context) {\n        return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.SYSTEM_ERROR, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.SYSTEM, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.CRITICAL, 'System error occurred', 'Something went wrong on our end. Please try again later.', {\n            context,\n            originalError,\n            retryable: true,\n            actionable: true,\n            suggestedActions: [\n                'Try again in a few minutes',\n                'Contact support if the issue persists'\n            ],\n            helpUrl: '/help/contact-support'\n        });\n    }\n    // Convert Dapper API errors to Ownly errors\n    static fromDapperError(dapperError, context) {\n        switch(dapperError.type){\n            case _lib_dapper_types__WEBPACK_IMPORTED_MODULE_1__.DapperErrorType.AUTHENTICATION_ERROR:\n                return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.API_UNAUTHORIZED, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.API, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.HIGH, 'Authentication failed with Dapper API', 'Authentication error. Please try again.', {\n                    context,\n                    originalError: dapperError,\n                    retryable: false,\n                    actionable: true,\n                    suggestedActions: [\n                        'Contact support if this issue persists'\n                    ]\n                });\n            case _lib_dapper_types__WEBPACK_IMPORTED_MODULE_1__.DapperErrorType.INSUFFICIENT_FUNDS:\n                return this.insufficientFunds(undefined, undefined, context);\n            case _lib_dapper_types__WEBPACK_IMPORTED_MODULE_1__.DapperErrorType.RATE_LIMIT_EXCEEDED:\n                return this.apiRateLimited(dapperError.retryAfter, context);\n            case _lib_dapper_types__WEBPACK_IMPORTED_MODULE_1__.DapperErrorType.SERVER_ERROR:\n                return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.API_SERVER_ERROR, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.API, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.HIGH, 'Dapper API server error', 'Service temporarily unavailable. Please try again later.', {\n                    context,\n                    originalError: dapperError,\n                    retryable: true,\n                    retryAfter: dapperError.retryAfter,\n                    actionable: true,\n                    suggestedActions: [\n                        'Wait a moment and try again'\n                    ]\n                });\n            case _lib_dapper_types__WEBPACK_IMPORTED_MODULE_1__.DapperErrorType.NETWORK_ERROR:\n                return this.networkError(dapperError, context);\n            case _lib_dapper_types__WEBPACK_IMPORTED_MODULE_1__.DapperErrorType.NFT_NOT_FOUND:\n                return this.createError(_types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.API_NOT_FOUND, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory.API, _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.MEDIUM, 'NFT not found', 'The requested NFT could not be found', {\n                    context,\n                    originalError: dapperError,\n                    actionable: true,\n                    suggestedActions: [\n                        'Check the NFT ID',\n                        'Refresh the page'\n                    ]\n                });\n            default:\n                return this.systemError(dapperError, context);\n        }\n    }\n    // Convert generic errors to Ownly errors\n    static fromError(error, context) {\n        if (error instanceof _types__WEBPACK_IMPORTED_MODULE_0__.OwnlyError) {\n            return error;\n        }\n        if (error instanceof _lib_dapper_types__WEBPACK_IMPORTED_MODULE_1__.DapperAPIError) {\n            return this.fromDapperError(error, context);\n        }\n        // Handle common error patterns\n        if (error.message.includes('network') || error.message.includes('fetch')) {\n            return this.networkError(error, context);\n        }\n        if (error.message.includes('timeout')) {\n            return this.apiTimeout(undefined, context);\n        }\n        if (error.message.includes('signature') || error.message.includes('rejected')) {\n            return this.walletSignatureRejected(context);\n        }\n        // Default to system error\n        return this.systemError(error, context);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/errors/error-factory.ts\n");

/***/ }),

/***/ "(rsc)/./lib/errors/error-handler.ts":
/*!*************************************!*\
  !*** ./lib/errors/error-handler.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorHandler: () => (/* binding */ ErrorHandler)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(rsc)/./lib/errors/types.ts\");\n/* harmony import */ var _error_factory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error-factory */ \"(rsc)/./lib/errors/error-factory.ts\");\n/* harmony import */ var _error_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./error-logger */ \"(rsc)/./lib/errors/error-logger.ts\");\n/* harmony import */ var _retry_handler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./retry-handler */ \"(rsc)/./lib/errors/retry-handler.ts\");\n// Centralized Error Handler\n\n\n\n\nclass ErrorHandler {\n    static{\n        this.errorCallbacks = [];\n    }\n    // Register global error callback (for UI notifications)\n    static onError(callback) {\n        this.errorCallbacks.push(callback);\n        // Return unsubscribe function\n        return ()=>{\n            const index = this.errorCallbacks.indexOf(callback);\n            if (index > -1) {\n                this.errorCallbacks.splice(index, 1);\n            }\n        };\n    }\n    // Handle any error and convert to OwnlyError\n    static handle(error, options = {}) {\n        const { context, logError = true, showToUser = true, onError } = options;\n        let ownlyError;\n        // Convert to OwnlyError if needed\n        if (error instanceof _types__WEBPACK_IMPORTED_MODULE_0__.OwnlyError) {\n            ownlyError = error;\n        } else if (error instanceof Error) {\n            ownlyError = _error_factory__WEBPACK_IMPORTED_MODULE_1__.ErrorFactory.fromError(error, context);\n        } else if (typeof error === 'string') {\n            ownlyError = _error_factory__WEBPACK_IMPORTED_MODULE_1__.ErrorFactory.systemError(new Error(error), context);\n        } else {\n            ownlyError = _error_factory__WEBPACK_IMPORTED_MODULE_1__.ErrorFactory.systemError(new Error('Unknown error occurred'), context);\n        }\n        // Log the error\n        if (logError) {\n            _error_logger__WEBPACK_IMPORTED_MODULE_2__.ErrorLogger.logError(ownlyError, context);\n        }\n        // Call registered callbacks\n        if (showToUser) {\n            this.errorCallbacks.forEach((callback)=>{\n                try {\n                    callback(ownlyError);\n                } catch (callbackError) {\n                    console.error('Error in error callback:', callbackError);\n                }\n            });\n        }\n        // Call custom error handler\n        onError?.(ownlyError);\n        return ownlyError;\n    }\n    // Handle async operations with error handling\n    static async handleAsync(operation, options = {}) {\n        try {\n            return await operation();\n        } catch (error) {\n            throw this.handle(error, options);\n        }\n    }\n    // Handle async operations with retry\n    static async handleAsyncWithRetry(operation, operationName, options = {}) {\n        try {\n            return await _retry_handler__WEBPACK_IMPORTED_MODULE_3__.RetryHandler.retryApiCall(operation, operationName, options.context);\n        } catch (error) {\n            throw this.handle(error, options);\n        }\n    }\n    // Wrapper for API calls\n    static async handleApiCall(apiCall, endpoint, context) {\n        return this.handleAsyncWithRetry(apiCall, `API call to ${endpoint}`, {\n            context: {\n                ...context,\n                endpoint\n            },\n            logError: true,\n            showToUser: true\n        });\n    }\n    // Wrapper for blockchain transactions\n    static async handleTransaction(transaction, transactionName, context) {\n        try {\n            return await _retry_handler__WEBPACK_IMPORTED_MODULE_3__.RetryHandler.retryTransaction(transaction, transactionName, context);\n        } catch (error) {\n            throw this.handle(error, {\n                context: {\n                    ...context,\n                    operation: transactionName\n                },\n                logError: true,\n                showToUser: true\n            });\n        }\n    }\n    // Wrapper for IPFS operations\n    static async handleIPFS(ipfsOperation, operationName, context) {\n        try {\n            return await _retry_handler__WEBPACK_IMPORTED_MODULE_3__.RetryHandler.retryIPFS(ipfsOperation, operationName, context);\n        } catch (error) {\n            throw this.handle(error, {\n                context: {\n                    ...context,\n                    operation: operationName\n                },\n                logError: true,\n                showToUser: true\n            });\n        }\n    }\n    // Validate and handle wallet operations\n    static async handleWalletOperation(walletOperation, operationName, context) {\n        try {\n            return await walletOperation();\n        } catch (error) {\n            // Handle specific wallet errors\n            if (error instanceof Error) {\n                if (error.message.includes('User rejected') || error.message.includes('User denied')) {\n                    throw _error_factory__WEBPACK_IMPORTED_MODULE_1__.ErrorFactory.walletSignatureRejected(context);\n                }\n                if (error.message.includes('insufficient funds') || error.message.includes('insufficient balance')) {\n                    throw _error_factory__WEBPACK_IMPORTED_MODULE_1__.ErrorFactory.insufficientFunds(undefined, undefined, context);\n                }\n            }\n            throw this.handle(error, {\n                context: {\n                    ...context,\n                    operation: operationName\n                },\n                logError: true,\n                showToUser: true\n            });\n        }\n    }\n    // Handle form validation errors\n    static handleValidationError(field, value, message, context) {\n        return this.handle(_error_factory__WEBPACK_IMPORTED_MODULE_1__.ErrorFactory.createError('VALIDATION_ERROR', 'VALIDATION', 'MEDIUM', `Validation failed for ${field}: ${message}`, message, {\n            context: {\n                ...context,\n                field,\n                value\n            },\n            actionable: true\n        }), {\n            logError: false,\n            showToUser: true\n        });\n    }\n    // Safe execution wrapper that doesn't throw\n    static async safeExecute(operation, fallback, options = {}) {\n        try {\n            return await operation();\n        } catch (error) {\n            this.handle(error, {\n                ...options,\n                showToUser: false\n            });\n            return fallback;\n        }\n    }\n    // Initialize global error handlers\n    static initialize() {\n        // Only initialize on client side to prevent hydration issues\n        if (false) {}\n        // Node.js unhandled rejections\n        if (typeof process !== 'undefined') {\n            process.on('unhandledRejection', (reason)=>{\n                this.handle(reason, {\n                    context: {\n                        type: 'unhandledrejection'\n                    },\n                    logError: true,\n                    showToUser: false\n                });\n            });\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/errors/error-handler.ts\n");

/***/ }),

/***/ "(rsc)/./lib/errors/error-logger.ts":
/*!************************************!*\
  !*** ./lib/errors/error-logger.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorLogger: () => (/* binding */ ErrorLogger)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(rsc)/./lib/errors/types.ts\");\n/* harmony import */ var _lib_hydration_safe_random__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/hydration/safe-random */ \"(rsc)/./lib/hydration/safe-random.ts\");\n// Error Logging and Monitoring\n\n\nclass ErrorLogger {\n    static{\n        this.logs = [];\n    }\n    static{\n        this.maxLogs = 1000;\n    }\n    static{\n        this.sessionId = this.generateSessionId();\n    }\n    static generateSessionId() {\n        return `session_${(0,_lib_hydration_safe_random__WEBPACK_IMPORTED_MODULE_1__.safeDateNow)()}_${(0,_lib_hydration_safe_random__WEBPACK_IMPORTED_MODULE_1__.safeGenerateId)('session').split('-')[1]}`;\n    }\n    static generateLogId() {\n        return `log_${(0,_lib_hydration_safe_random__WEBPACK_IMPORTED_MODULE_1__.safeDateNow)()}_${(0,_lib_hydration_safe_random__WEBPACK_IMPORTED_MODULE_1__.safeGenerateId)('log').split('-')[1]}`;\n    }\n    static logError(error, additionalContext) {\n        const logEntry = {\n            id: this.generateLogId(),\n            timestamp: new Date().toISOString(),\n            level: this.mapSeverityToLevel(error.severity),\n            message: error.message,\n            error,\n            context: {\n                ...error.context,\n                ...additionalContext\n            },\n            userAgent:  false ? 0 : undefined,\n            url:  false ? 0 : undefined,\n            sessionId: this.sessionId\n        };\n        this.addLog(logEntry);\n        this.consoleLog(logEntry);\n        // Send to external monitoring service in production\n        if (false) {}\n    }\n    static logWarning(message, context) {\n        const logEntry = {\n            id: this.generateLogId(),\n            timestamp: new Date().toISOString(),\n            level: 'warn',\n            message,\n            context,\n            userAgent:  false ? 0 : undefined,\n            url:  false ? 0 : undefined,\n            sessionId: this.sessionId\n        };\n        this.addLog(logEntry);\n        this.consoleLog(logEntry);\n    }\n    static logInfo(message, context) {\n        const logEntry = {\n            id: this.generateLogId(),\n            timestamp: new Date().toISOString(),\n            level: 'info',\n            message,\n            context,\n            sessionId: this.sessionId\n        };\n        this.addLog(logEntry);\n        if (true) {\n            this.consoleLog(logEntry);\n        }\n    }\n    static mapSeverityToLevel(severity) {\n        switch(severity){\n            case _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.CRITICAL:\n            case _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.HIGH:\n                return 'error';\n            case _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.MEDIUM:\n            case _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.LOW:\n                return 'warn';\n            default:\n                return 'error';\n        }\n    }\n    static addLog(logEntry) {\n        this.logs.push(logEntry);\n        // Keep only the most recent logs\n        if (this.logs.length > this.maxLogs) {\n            this.logs = this.logs.slice(-this.maxLogs);\n        }\n    }\n    static consoleLog(logEntry) {\n        const { level, message, error, context } = logEntry;\n        const logData = {\n            timestamp: logEntry.timestamp,\n            message,\n            context,\n            ...error && {\n                errorCode: error.code,\n                errorCategory: error.category,\n                errorSeverity: error.severity,\n                retryable: error.retryable,\n                actionable: error.actionable\n            }\n        };\n        switch(level){\n            case 'error':\n                console.error(`[OWNLY ERROR] ${message}`, logData);\n                if (error?.originalError) {\n                    console.error('Original error:', error.originalError);\n                }\n                break;\n            case 'warn':\n                console.warn(`[OWNLY WARN] ${message}`, logData);\n                break;\n            case 'info':\n                console.info(`[OWNLY INFO] ${message}`, logData);\n                break;\n            default:\n                console.log(`[OWNLY] ${message}`, logData);\n        }\n    }\n    static async sendToMonitoring(logEntry) {\n        try {\n            // In a real implementation, you would send to services like:\n            // - Sentry\n            // - LogRocket\n            // - DataDog\n            // - Custom analytics endpoint\n            // Example implementation:\n            if (false) {}\n        } catch  {\n        // Silently fail monitoring\n        }\n    }\n    // Get recent logs for debugging\n    static getRecentLogs(count = 50) {\n        return this.logs.slice(-count);\n    }\n    // Get logs by severity\n    static getLogsBySeverity(severity) {\n        return this.logs.filter((log)=>log.error?.severity === severity);\n    }\n    // Get logs by category\n    static getLogsByCategory(category) {\n        return this.logs.filter((log)=>log.error?.category === category);\n    }\n    // Clear logs (useful for testing)\n    static clearLogs() {\n        this.logs = [];\n    }\n    // Export logs for debugging\n    static exportLogs() {\n        return JSON.stringify(this.logs, null, 2);\n    }\n    // Get error statistics\n    static getErrorStats() {\n        const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n        const stats = {\n            total: this.logs.length,\n            bySeverity: {\n                [_types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.CRITICAL]: 0,\n                [_types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.HIGH]: 0,\n                [_types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.MEDIUM]: 0,\n                [_types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity.LOW]: 0\n            },\n            byCategory: {},\n            recent: 0\n        };\n        this.logs.forEach((log)=>{\n            if (log.error) {\n                stats.bySeverity[log.error.severity]++;\n                const category = log.error.category;\n                stats.byCategory[category] = (stats.byCategory[category] || 0) + 1;\n            }\n            if (new Date(log.timestamp) > oneHourAgo) {\n                stats.recent++;\n            }\n        });\n        return stats;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZXJyb3JzL2Vycm9yLWxvZ2dlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwrQkFBK0I7QUFFa0M7QUFDUTtBQWVsRSxNQUFNRzs7YUFDSUMsT0FBbUIsRUFBRTs7O2FBQ3JCQyxVQUFVOzs7YUFDVkMsWUFBWSxJQUFJLENBQUNDLGlCQUFpQjs7SUFFakQsT0FBZUEsb0JBQTRCO1FBQ3pDLE9BQU8sQ0FBQyxRQUFRLEVBQUVOLHVFQUFXQSxHQUFHLENBQUMsRUFBRUMsMEVBQWNBLENBQUMsV0FBV00sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDOUU7SUFFQSxPQUFlQyxnQkFBd0I7UUFDckMsT0FBTyxDQUFDLElBQUksRUFBRVIsdUVBQVdBLEdBQUcsQ0FBQyxFQUFFQywwRUFBY0EsQ0FBQyxPQUFPTSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUN0RTtJQUVBLE9BQU9FLFNBQVNDLEtBQWlCLEVBQUVDLGlCQUFnQyxFQUFRO1FBQ3pFLE1BQU1DLFdBQXFCO1lBQ3pCQyxJQUFJLElBQUksQ0FBQ0wsYUFBYTtZQUN0Qk0sV0FBVyxJQUFJQyxPQUFPQyxXQUFXO1lBQ2pDQyxPQUFPLElBQUksQ0FBQ0Msa0JBQWtCLENBQUNSLE1BQU1TLFFBQVE7WUFDN0NDLFNBQVNWLE1BQU1VLE9BQU87WUFDdEJWO1lBQ0FXLFNBQVM7Z0JBQUUsR0FBR1gsTUFBTVcsT0FBTztnQkFBRSxHQUFHVixpQkFBaUI7WUFBQztZQUNsRFcsV0FBVyxNQUE2QixHQUFHQyxDQUEwQixHQUFHRTtZQUN4RUMsS0FBSyxNQUE2QixHQUFHSCxDQUFvQixHQUFHRTtZQUM1RHBCLFdBQVcsSUFBSSxDQUFDQSxTQUFTO1FBQzNCO1FBRUEsSUFBSSxDQUFDd0IsTUFBTSxDQUFDakI7UUFDWixJQUFJLENBQUNrQixVQUFVLENBQUNsQjtRQUVoQixvREFBb0Q7UUFDcEQsSUFBSW1CLEtBQXFDLEVBQUUsRUFFMUM7SUFDSDtJQUVBLE9BQU9FLFdBQVdiLE9BQWUsRUFBRUMsT0FBc0IsRUFBUTtRQUMvRCxNQUFNVCxXQUFxQjtZQUN6QkMsSUFBSSxJQUFJLENBQUNMLGFBQWE7WUFDdEJNLFdBQVcsSUFBSUMsT0FBT0MsV0FBVztZQUNqQ0MsT0FBTztZQUNQRztZQUNBQztZQUNBQyxXQUFXLE1BQTZCLEdBQUdDLENBQTBCLEdBQUdFO1lBQ3hFQyxLQUFLLE1BQTZCLEdBQUdILENBQW9CLEdBQUdFO1lBQzVEcEIsV0FBVyxJQUFJLENBQUNBLFNBQVM7UUFDM0I7UUFFQSxJQUFJLENBQUN3QixNQUFNLENBQUNqQjtRQUNaLElBQUksQ0FBQ2tCLFVBQVUsQ0FBQ2xCO0lBQ2xCO0lBRUEsT0FBT3NCLFFBQVFkLE9BQWUsRUFBRUMsT0FBc0IsRUFBUTtRQUM1RCxNQUFNVCxXQUFxQjtZQUN6QkMsSUFBSSxJQUFJLENBQUNMLGFBQWE7WUFDdEJNLFdBQVcsSUFBSUMsT0FBT0MsV0FBVztZQUNqQ0MsT0FBTztZQUNQRztZQUNBQztZQUNBaEIsV0FBVyxJQUFJLENBQUNBLFNBQVM7UUFDM0I7UUFFQSxJQUFJLENBQUN3QixNQUFNLENBQUNqQjtRQUVaLElBQUltQixJQUFzQyxFQUFFO1lBQzFDLElBQUksQ0FBQ0QsVUFBVSxDQUFDbEI7UUFDbEI7SUFDRjtJQUVBLE9BQWVNLG1CQUFtQkMsUUFBdUIsRUFBb0I7UUFDM0UsT0FBUUE7WUFDTixLQUFLcEIsaURBQWFBLENBQUNvQyxRQUFRO1lBQzNCLEtBQUtwQyxpREFBYUEsQ0FBQ3FDLElBQUk7Z0JBQ3JCLE9BQU87WUFDVCxLQUFLckMsaURBQWFBLENBQUNzQyxNQUFNO1lBQ3pCLEtBQUt0QyxpREFBYUEsQ0FBQ3VDLEdBQUc7Z0JBQ3BCLE9BQU87WUFDVDtnQkFDRSxPQUFPO1FBQ1g7SUFDRjtJQUVBLE9BQWVULE9BQU9qQixRQUFrQixFQUFRO1FBQzlDLElBQUksQ0FBQ1QsSUFBSSxDQUFDb0MsSUFBSSxDQUFDM0I7UUFFZixpQ0FBaUM7UUFDakMsSUFBSSxJQUFJLENBQUNULElBQUksQ0FBQ3FDLE1BQU0sR0FBRyxJQUFJLENBQUNwQyxPQUFPLEVBQUU7WUFDbkMsSUFBSSxDQUFDRCxJQUFJLEdBQUcsSUFBSSxDQUFDQSxJQUFJLENBQUNzQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUNyQyxPQUFPO1FBQzNDO0lBQ0Y7SUFFQSxPQUFlMEIsV0FBV2xCLFFBQWtCLEVBQVE7UUFDbEQsTUFBTSxFQUFFSyxLQUFLLEVBQUVHLE9BQU8sRUFBRVYsS0FBSyxFQUFFVyxPQUFPLEVBQUUsR0FBR1Q7UUFFM0MsTUFBTThCLFVBQVU7WUFDZDVCLFdBQVdGLFNBQVNFLFNBQVM7WUFDN0JNO1lBQ0FDO1lBQ0EsR0FBSVgsU0FBUztnQkFDWGlDLFdBQVdqQyxNQUFNa0MsSUFBSTtnQkFDckJDLGVBQWVuQyxNQUFNb0MsUUFBUTtnQkFDN0JDLGVBQWVyQyxNQUFNUyxRQUFRO2dCQUM3QjZCLFdBQVd0QyxNQUFNc0MsU0FBUztnQkFDMUJDLFlBQVl2QyxNQUFNdUMsVUFBVTtZQUM5QixDQUFDO1FBQ0g7UUFFQSxPQUFRaEM7WUFDTixLQUFLO2dCQUNIaUMsUUFBUXhDLEtBQUssQ0FBQyxDQUFDLGNBQWMsRUFBRVUsU0FBUyxFQUFFc0I7Z0JBQzFDLElBQUloQyxPQUFPeUMsZUFBZTtvQkFDeEJELFFBQVF4QyxLQUFLLENBQUMsbUJBQW1CQSxNQUFNeUMsYUFBYTtnQkFDdEQ7Z0JBQ0E7WUFDRixLQUFLO2dCQUNIRCxRQUFRRSxJQUFJLENBQUMsQ0FBQyxhQUFhLEVBQUVoQyxTQUFTLEVBQUVzQjtnQkFDeEM7WUFDRixLQUFLO2dCQUNIUSxRQUFRRyxJQUFJLENBQUMsQ0FBQyxhQUFhLEVBQUVqQyxTQUFTLEVBQUVzQjtnQkFDeEM7WUFDRjtnQkFDRVEsUUFBUUksR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFbEMsU0FBUyxFQUFFc0I7UUFDdEM7SUFDRjtJQUVBLGFBQXFCVixpQkFBaUJwQixRQUFrQixFQUFpQjtRQUN2RSxJQUFJO1lBQ0YsNkRBQTZEO1lBQzdELFdBQVc7WUFDWCxjQUFjO1lBQ2QsWUFBWTtZQUNaLDhCQUE4QjtZQUU5QiwwQkFBMEI7WUFDMUIsSUFBSSxLQUE2QyxFQUFFLEVBVWxEO1FBQ0gsRUFBRSxPQUFNO1FBQ04sMkJBQTJCO1FBQzdCO0lBQ0Y7SUFFQSxnQ0FBZ0M7SUFDaEMsT0FBT2tELGNBQWNDLFFBQVEsRUFBRSxFQUFjO1FBQzNDLE9BQU8sSUFBSSxDQUFDNUQsSUFBSSxDQUFDc0MsS0FBSyxDQUFDLENBQUNzQjtJQUMxQjtJQUVBLHVCQUF1QjtJQUN2QixPQUFPQyxrQkFBa0I3QyxRQUF1QixFQUFjO1FBQzVELE9BQU8sSUFBSSxDQUFDaEIsSUFBSSxDQUFDOEQsTUFBTSxDQUFDWCxDQUFBQSxNQUN0QkEsSUFBSTVDLEtBQUssRUFBRVMsYUFBYUE7SUFFNUI7SUFFQSx1QkFBdUI7SUFDdkIsT0FBTytDLGtCQUFrQnBCLFFBQWdCLEVBQWM7UUFDckQsT0FBTyxJQUFJLENBQUMzQyxJQUFJLENBQUM4RCxNQUFNLENBQUNYLENBQUFBLE1BQ3RCQSxJQUFJNUMsS0FBSyxFQUFFb0MsYUFBYUE7SUFFNUI7SUFFQSxrQ0FBa0M7SUFDbEMsT0FBT3FCLFlBQWtCO1FBQ3ZCLElBQUksQ0FBQ2hFLElBQUksR0FBRyxFQUFFO0lBQ2hCO0lBRUEsNEJBQTRCO0lBQzVCLE9BQU9pRSxhQUFxQjtRQUMxQixPQUFPVCxLQUFLQyxTQUFTLENBQUMsSUFBSSxDQUFDekQsSUFBSSxFQUFFLE1BQU07SUFDekM7SUFFQSx1QkFBdUI7SUFDdkIsT0FBT2tFLGdCQUtMO1FBQ0EsTUFBTUMsYUFBYSxJQUFJdkQsS0FBS0EsS0FBS3dELEdBQUcsS0FBSyxLQUFLLEtBQUs7UUFFbkQsTUFBTUMsUUFBUTtZQUNaQyxPQUFPLElBQUksQ0FBQ3RFLElBQUksQ0FBQ3FDLE1BQU07WUFDdkJrQyxZQUFZO2dCQUNWLENBQUMzRSxpREFBYUEsQ0FBQ29DLFFBQVEsQ0FBQyxFQUFFO2dCQUMxQixDQUFDcEMsaURBQWFBLENBQUNxQyxJQUFJLENBQUMsRUFBRTtnQkFDdEIsQ0FBQ3JDLGlEQUFhQSxDQUFDc0MsTUFBTSxDQUFDLEVBQUU7Z0JBQ3hCLENBQUN0QyxpREFBYUEsQ0FBQ3VDLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCO1lBQ0FxQyxZQUFZLENBQUM7WUFDYkMsUUFBUTtRQUNWO1FBRUEsSUFBSSxDQUFDekUsSUFBSSxDQUFDMEUsT0FBTyxDQUFDdkIsQ0FBQUE7WUFDaEIsSUFBSUEsSUFBSTVDLEtBQUssRUFBRTtnQkFDYjhELE1BQU1FLFVBQVUsQ0FBQ3BCLElBQUk1QyxLQUFLLENBQUNTLFFBQVEsQ0FBQztnQkFFcEMsTUFBTTJCLFdBQVdRLElBQUk1QyxLQUFLLENBQUNvQyxRQUFRO2dCQUNuQzBCLE1BQU1HLFVBQVUsQ0FBQzdCLFNBQVMsR0FBRyxDQUFDMEIsTUFBTUcsVUFBVSxDQUFDN0IsU0FBUyxJQUFJLEtBQUs7WUFDbkU7WUFFQSxJQUFJLElBQUkvQixLQUFLdUMsSUFBSXhDLFNBQVMsSUFBSXdELFlBQVk7Z0JBQ3hDRSxNQUFNSSxNQUFNO1lBQ2Q7UUFDRjtRQUVBLE9BQU9KO0lBQ1Q7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvYWx0Y29pbi1kYWRkeS9Eb3dubG9hZHMvb3dubHkvbGliL2Vycm9ycy9lcnJvci1sb2dnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRXJyb3IgTG9nZ2luZyBhbmQgTW9uaXRvcmluZ1xuXG5pbXBvcnQgeyBPd25seUVycm9yLCBFcnJvclNldmVyaXR5LCBFcnJvckNvbnRleHQgfSBmcm9tICcuL3R5cGVzJ1xuaW1wb3J0IHsgc2FmZURhdGVOb3csIHNhZmVHZW5lcmF0ZUlkIH0gZnJvbSAnQC9saWIvaHlkcmF0aW9uL3NhZmUtcmFuZG9tJ1xuXG5leHBvcnQgaW50ZXJmYWNlIExvZ0VudHJ5IHtcbiAgaWQ6IHN0cmluZ1xuICB0aW1lc3RhbXA6IHN0cmluZ1xuICBsZXZlbDogJ2Vycm9yJyB8ICd3YXJuJyB8ICdpbmZvJyB8ICdkZWJ1ZydcbiAgbWVzc2FnZTogc3RyaW5nXG4gIGVycm9yPzogT3dubHlFcnJvclxuICBjb250ZXh0PzogRXJyb3JDb250ZXh0XG4gIHVzZXJBZ2VudD86IHN0cmluZ1xuICB1cmw/OiBzdHJpbmdcbiAgdXNlcklkPzogc3RyaW5nXG4gIHNlc3Npb25JZD86IHN0cmluZ1xufVxuXG5leHBvcnQgY2xhc3MgRXJyb3JMb2dnZXIge1xuICBwcml2YXRlIHN0YXRpYyBsb2dzOiBMb2dFbnRyeVtdID0gW11cbiAgcHJpdmF0ZSBzdGF0aWMgbWF4TG9ncyA9IDEwMDBcbiAgcHJpdmF0ZSBzdGF0aWMgc2Vzc2lvbklkID0gdGhpcy5nZW5lcmF0ZVNlc3Npb25JZCgpXG5cbiAgcHJpdmF0ZSBzdGF0aWMgZ2VuZXJhdGVTZXNzaW9uSWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYHNlc3Npb25fJHtzYWZlRGF0ZU5vdygpfV8ke3NhZmVHZW5lcmF0ZUlkKCdzZXNzaW9uJykuc3BsaXQoJy0nKVsxXX1gXG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBnZW5lcmF0ZUxvZ0lkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBsb2dfJHtzYWZlRGF0ZU5vdygpfV8ke3NhZmVHZW5lcmF0ZUlkKCdsb2cnKS5zcGxpdCgnLScpWzFdfWBcbiAgfVxuXG4gIHN0YXRpYyBsb2dFcnJvcihlcnJvcjogT3dubHlFcnJvciwgYWRkaXRpb25hbENvbnRleHQ/OiBFcnJvckNvbnRleHQpOiB2b2lkIHtcbiAgICBjb25zdCBsb2dFbnRyeTogTG9nRW50cnkgPSB7XG4gICAgICBpZDogdGhpcy5nZW5lcmF0ZUxvZ0lkKCksXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGxldmVsOiB0aGlzLm1hcFNldmVyaXR5VG9MZXZlbChlcnJvci5zZXZlcml0eSksXG4gICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgZXJyb3IsXG4gICAgICBjb250ZXh0OiB7IC4uLmVycm9yLmNvbnRleHQsIC4uLmFkZGl0aW9uYWxDb250ZXh0IH0sXG4gICAgICB1c2VyQWdlbnQ6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQgOiB1bmRlZmluZWQsXG4gICAgICB1cmw6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93LmxvY2F0aW9uLmhyZWYgOiB1bmRlZmluZWQsXG4gICAgICBzZXNzaW9uSWQ6IHRoaXMuc2Vzc2lvbklkXG4gICAgfVxuXG4gICAgdGhpcy5hZGRMb2cobG9nRW50cnkpXG4gICAgdGhpcy5jb25zb2xlTG9nKGxvZ0VudHJ5KVxuICAgIFxuICAgIC8vIFNlbmQgdG8gZXh0ZXJuYWwgbW9uaXRvcmluZyBzZXJ2aWNlIGluIHByb2R1Y3Rpb25cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhpcy5zZW5kVG9Nb25pdG9yaW5nKGxvZ0VudHJ5KVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBsb2dXYXJuaW5nKG1lc3NhZ2U6IHN0cmluZywgY29udGV4dD86IEVycm9yQ29udGV4dCk6IHZvaWQge1xuICAgIGNvbnN0IGxvZ0VudHJ5OiBMb2dFbnRyeSA9IHtcbiAgICAgIGlkOiB0aGlzLmdlbmVyYXRlTG9nSWQoKSxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgbGV2ZWw6ICd3YXJuJyxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBjb250ZXh0LFxuICAgICAgdXNlckFnZW50OiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50IDogdW5kZWZpbmVkLFxuICAgICAgdXJsOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5sb2NhdGlvbi5ocmVmIDogdW5kZWZpbmVkLFxuICAgICAgc2Vzc2lvbklkOiB0aGlzLnNlc3Npb25JZFxuICAgIH1cblxuICAgIHRoaXMuYWRkTG9nKGxvZ0VudHJ5KVxuICAgIHRoaXMuY29uc29sZUxvZyhsb2dFbnRyeSlcbiAgfVxuXG4gIHN0YXRpYyBsb2dJbmZvKG1lc3NhZ2U6IHN0cmluZywgY29udGV4dD86IEVycm9yQ29udGV4dCk6IHZvaWQge1xuICAgIGNvbnN0IGxvZ0VudHJ5OiBMb2dFbnRyeSA9IHtcbiAgICAgIGlkOiB0aGlzLmdlbmVyYXRlTG9nSWQoKSxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgbGV2ZWw6ICdpbmZvJyxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBjb250ZXh0LFxuICAgICAgc2Vzc2lvbklkOiB0aGlzLnNlc3Npb25JZFxuICAgIH1cblxuICAgIHRoaXMuYWRkTG9nKGxvZ0VudHJ5KVxuICAgIFxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgdGhpcy5jb25zb2xlTG9nKGxvZ0VudHJ5KVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIG1hcFNldmVyaXR5VG9MZXZlbChzZXZlcml0eTogRXJyb3JTZXZlcml0eSk6ICdlcnJvcicgfCAnd2Fybicge1xuICAgIHN3aXRjaCAoc2V2ZXJpdHkpIHtcbiAgICAgIGNhc2UgRXJyb3JTZXZlcml0eS5DUklUSUNBTDpcbiAgICAgIGNhc2UgRXJyb3JTZXZlcml0eS5ISUdIOlxuICAgICAgICByZXR1cm4gJ2Vycm9yJ1xuICAgICAgY2FzZSBFcnJvclNldmVyaXR5Lk1FRElVTTpcbiAgICAgIGNhc2UgRXJyb3JTZXZlcml0eS5MT1c6XG4gICAgICAgIHJldHVybiAnd2FybidcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnZXJyb3InXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYWRkTG9nKGxvZ0VudHJ5OiBMb2dFbnRyeSk6IHZvaWQge1xuICAgIHRoaXMubG9ncy5wdXNoKGxvZ0VudHJ5KVxuICAgIFxuICAgIC8vIEtlZXAgb25seSB0aGUgbW9zdCByZWNlbnQgbG9nc1xuICAgIGlmICh0aGlzLmxvZ3MubGVuZ3RoID4gdGhpcy5tYXhMb2dzKSB7XG4gICAgICB0aGlzLmxvZ3MgPSB0aGlzLmxvZ3Muc2xpY2UoLXRoaXMubWF4TG9ncylcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBjb25zb2xlTG9nKGxvZ0VudHJ5OiBMb2dFbnRyeSk6IHZvaWQge1xuICAgIGNvbnN0IHsgbGV2ZWwsIG1lc3NhZ2UsIGVycm9yLCBjb250ZXh0IH0gPSBsb2dFbnRyeVxuICAgIFxuICAgIGNvbnN0IGxvZ0RhdGEgPSB7XG4gICAgICB0aW1lc3RhbXA6IGxvZ0VudHJ5LnRpbWVzdGFtcCxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBjb250ZXh0LFxuICAgICAgLi4uKGVycm9yICYmIHsgXG4gICAgICAgIGVycm9yQ29kZTogZXJyb3IuY29kZSxcbiAgICAgICAgZXJyb3JDYXRlZ29yeTogZXJyb3IuY2F0ZWdvcnksXG4gICAgICAgIGVycm9yU2V2ZXJpdHk6IGVycm9yLnNldmVyaXR5LFxuICAgICAgICByZXRyeWFibGU6IGVycm9yLnJldHJ5YWJsZSxcbiAgICAgICAgYWN0aW9uYWJsZTogZXJyb3IuYWN0aW9uYWJsZVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFtPV05MWSBFUlJPUl0gJHttZXNzYWdlfWAsIGxvZ0RhdGEpXG4gICAgICAgIGlmIChlcnJvcj8ub3JpZ2luYWxFcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ09yaWdpbmFsIGVycm9yOicsIGVycm9yLm9yaWdpbmFsRXJyb3IpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3dhcm4nOlxuICAgICAgICBjb25zb2xlLndhcm4oYFtPV05MWSBXQVJOXSAke21lc3NhZ2V9YCwgbG9nRGF0YSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2luZm8nOlxuICAgICAgICBjb25zb2xlLmluZm8oYFtPV05MWSBJTkZPXSAke21lc3NhZ2V9YCwgbG9nRGF0YSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbnNvbGUubG9nKGBbT1dOTFldICR7bWVzc2FnZX1gLCBsb2dEYXRhKVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGFzeW5jIHNlbmRUb01vbml0b3JpbmcobG9nRW50cnk6IExvZ0VudHJ5KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEluIGEgcmVhbCBpbXBsZW1lbnRhdGlvbiwgeW91IHdvdWxkIHNlbmQgdG8gc2VydmljZXMgbGlrZTpcbiAgICAgIC8vIC0gU2VudHJ5XG4gICAgICAvLyAtIExvZ1JvY2tldFxuICAgICAgLy8gLSBEYXRhRG9nXG4gICAgICAvLyAtIEN1c3RvbSBhbmFseXRpY3MgZW5kcG9pbnRcbiAgICAgIFxuICAgICAgLy8gRXhhbXBsZSBpbXBsZW1lbnRhdGlvbjpcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZmV0Y2gpIHtcbiAgICAgICAgYXdhaXQgZmV0Y2goJy9hcGkvbW9uaXRvcmluZy9lcnJvcnMnLCB7XG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkobG9nRW50cnkpXG4gICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAvLyBTaWxlbnRseSBmYWlsIG1vbml0b3JpbmcgdG8gbm90IGFmZmVjdCB1c2VyIGV4cGVyaWVuY2VcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIFNpbGVudGx5IGZhaWwgbW9uaXRvcmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIEdldCByZWNlbnQgbG9ncyBmb3IgZGVidWdnaW5nXG4gIHN0YXRpYyBnZXRSZWNlbnRMb2dzKGNvdW50ID0gNTApOiBMb2dFbnRyeVtdIHtcbiAgICByZXR1cm4gdGhpcy5sb2dzLnNsaWNlKC1jb3VudClcbiAgfVxuXG4gIC8vIEdldCBsb2dzIGJ5IHNldmVyaXR5XG4gIHN0YXRpYyBnZXRMb2dzQnlTZXZlcml0eShzZXZlcml0eTogRXJyb3JTZXZlcml0eSk6IExvZ0VudHJ5W10ge1xuICAgIHJldHVybiB0aGlzLmxvZ3MuZmlsdGVyKGxvZyA9PiBcbiAgICAgIGxvZy5lcnJvcj8uc2V2ZXJpdHkgPT09IHNldmVyaXR5XG4gICAgKVxuICB9XG5cbiAgLy8gR2V0IGxvZ3MgYnkgY2F0ZWdvcnlcbiAgc3RhdGljIGdldExvZ3NCeUNhdGVnb3J5KGNhdGVnb3J5OiBzdHJpbmcpOiBMb2dFbnRyeVtdIHtcbiAgICByZXR1cm4gdGhpcy5sb2dzLmZpbHRlcihsb2cgPT4gXG4gICAgICBsb2cuZXJyb3I/LmNhdGVnb3J5ID09PSBjYXRlZ29yeVxuICAgIClcbiAgfVxuXG4gIC8vIENsZWFyIGxvZ3MgKHVzZWZ1bCBmb3IgdGVzdGluZylcbiAgc3RhdGljIGNsZWFyTG9ncygpOiB2b2lkIHtcbiAgICB0aGlzLmxvZ3MgPSBbXVxuICB9XG5cbiAgLy8gRXhwb3J0IGxvZ3MgZm9yIGRlYnVnZ2luZ1xuICBzdGF0aWMgZXhwb3J0TG9ncygpOiBzdHJpbmcge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLmxvZ3MsIG51bGwsIDIpXG4gIH1cblxuICAvLyBHZXQgZXJyb3Igc3RhdGlzdGljc1xuICBzdGF0aWMgZ2V0RXJyb3JTdGF0cygpOiB7XG4gICAgdG90YWw6IG51bWJlclxuICAgIGJ5U2V2ZXJpdHk6IFJlY29yZDxFcnJvclNldmVyaXR5LCBudW1iZXI+XG4gICAgYnlDYXRlZ29yeTogUmVjb3JkPHN0cmluZywgbnVtYmVyPlxuICAgIHJlY2VudDogbnVtYmVyIC8vIGVycm9ycyBpbiBsYXN0IGhvdXJcbiAgfSB7XG4gICAgY29uc3Qgb25lSG91ckFnbyA9IG5ldyBEYXRlKERhdGUubm93KCkgLSA2MCAqIDYwICogMTAwMClcbiAgICBcbiAgICBjb25zdCBzdGF0cyA9IHtcbiAgICAgIHRvdGFsOiB0aGlzLmxvZ3MubGVuZ3RoLFxuICAgICAgYnlTZXZlcml0eToge1xuICAgICAgICBbRXJyb3JTZXZlcml0eS5DUklUSUNBTF06IDAsXG4gICAgICAgIFtFcnJvclNldmVyaXR5LkhJR0hdOiAwLFxuICAgICAgICBbRXJyb3JTZXZlcml0eS5NRURJVU1dOiAwLFxuICAgICAgICBbRXJyb3JTZXZlcml0eS5MT1ddOiAwXG4gICAgICB9LFxuICAgICAgYnlDYXRlZ29yeToge30gYXMgUmVjb3JkPHN0cmluZywgbnVtYmVyPixcbiAgICAgIHJlY2VudDogMFxuICAgIH1cblxuICAgIHRoaXMubG9ncy5mb3JFYWNoKGxvZyA9PiB7XG4gICAgICBpZiAobG9nLmVycm9yKSB7XG4gICAgICAgIHN0YXRzLmJ5U2V2ZXJpdHlbbG9nLmVycm9yLnNldmVyaXR5XSsrXG4gICAgICAgIFxuICAgICAgICBjb25zdCBjYXRlZ29yeSA9IGxvZy5lcnJvci5jYXRlZ29yeVxuICAgICAgICBzdGF0cy5ieUNhdGVnb3J5W2NhdGVnb3J5XSA9IChzdGF0cy5ieUNhdGVnb3J5W2NhdGVnb3J5XSB8fCAwKSArIDFcbiAgICAgIH1cblxuICAgICAgaWYgKG5ldyBEYXRlKGxvZy50aW1lc3RhbXApID4gb25lSG91ckFnbykge1xuICAgICAgICBzdGF0cy5yZWNlbnQrK1xuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gc3RhdHNcbiAgfVxufSJdLCJuYW1lcyI6WyJFcnJvclNldmVyaXR5Iiwic2FmZURhdGVOb3ciLCJzYWZlR2VuZXJhdGVJZCIsIkVycm9yTG9nZ2VyIiwibG9ncyIsIm1heExvZ3MiLCJzZXNzaW9uSWQiLCJnZW5lcmF0ZVNlc3Npb25JZCIsInNwbGl0IiwiZ2VuZXJhdGVMb2dJZCIsImxvZ0Vycm9yIiwiZXJyb3IiLCJhZGRpdGlvbmFsQ29udGV4dCIsImxvZ0VudHJ5IiwiaWQiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJsZXZlbCIsIm1hcFNldmVyaXR5VG9MZXZlbCIsInNldmVyaXR5IiwibWVzc2FnZSIsImNvbnRleHQiLCJ1c2VyQWdlbnQiLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJ1bmRlZmluZWQiLCJ1cmwiLCJsb2NhdGlvbiIsImhyZWYiLCJhZGRMb2ciLCJjb25zb2xlTG9nIiwicHJvY2VzcyIsInNlbmRUb01vbml0b3JpbmciLCJsb2dXYXJuaW5nIiwibG9nSW5mbyIsIkNSSVRJQ0FMIiwiSElHSCIsIk1FRElVTSIsIkxPVyIsInB1c2giLCJsZW5ndGgiLCJzbGljZSIsImxvZ0RhdGEiLCJlcnJvckNvZGUiLCJjb2RlIiwiZXJyb3JDYXRlZ29yeSIsImNhdGVnb3J5IiwiZXJyb3JTZXZlcml0eSIsInJldHJ5YWJsZSIsImFjdGlvbmFibGUiLCJjb25zb2xlIiwib3JpZ2luYWxFcnJvciIsIndhcm4iLCJpbmZvIiwibG9nIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjYXRjaCIsImdldFJlY2VudExvZ3MiLCJjb3VudCIsImdldExvZ3NCeVNldmVyaXR5IiwiZmlsdGVyIiwiZ2V0TG9nc0J5Q2F0ZWdvcnkiLCJjbGVhckxvZ3MiLCJleHBvcnRMb2dzIiwiZ2V0RXJyb3JTdGF0cyIsIm9uZUhvdXJBZ28iLCJub3ciLCJzdGF0cyIsInRvdGFsIiwiYnlTZXZlcml0eSIsImJ5Q2F0ZWdvcnkiLCJyZWNlbnQiLCJmb3JFYWNoIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/errors/error-logger.ts\n");

/***/ }),

/***/ "(rsc)/./lib/errors/index.ts":
/*!*****************************!*\
  !*** ./lib/errors/index.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERROR_CODES: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES),\n/* harmony export */   ErrorCategory: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.ErrorCategory),\n/* harmony export */   ErrorFactory: () => (/* reexport safe */ _error_factory__WEBPACK_IMPORTED_MODULE_1__.ErrorFactory),\n/* harmony export */   ErrorHandler: () => (/* reexport safe */ _error_handler__WEBPACK_IMPORTED_MODULE_2__.ErrorHandler),\n/* harmony export */   ErrorLogger: () => (/* reexport safe */ _error_logger__WEBPACK_IMPORTED_MODULE_3__.ErrorLogger),\n/* harmony export */   ErrorSeverity: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.ErrorSeverity),\n/* harmony export */   OwnlyError: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.OwnlyError),\n/* harmony export */   RetryHandler: () => (/* reexport safe */ _retry_handler__WEBPACK_IMPORTED_MODULE_4__.RetryHandler)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(rsc)/./lib/errors/types.ts\");\n/* harmony import */ var _error_factory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error-factory */ \"(rsc)/./lib/errors/error-factory.ts\");\n/* harmony import */ var _error_handler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./error-handler */ \"(rsc)/./lib/errors/error-handler.ts\");\n/* harmony import */ var _error_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error-logger */ \"(rsc)/./lib/errors/error-logger.ts\");\n/* harmony import */ var _retry_handler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./retry-handler */ \"(rsc)/./lib/errors/retry-handler.ts\");\n// Error Handling System Exports\n\n\n\n\n\n// Re-export commonly used items for convenience\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZXJyb3JzL2luZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxnQ0FBZ0M7QUFFVDtBQUNRO0FBQ0E7QUFDRDtBQUNDO0FBRS9CLGdEQUFnRDtBQU1oQztBQUU4QjtBQUNBO0FBQ0Y7QUFDRSIsInNvdXJjZXMiOlsiL2hvbWUvYWx0Y29pbi1kYWRkeS9Eb3dubG9hZHMvb3dubHkvbGliL2Vycm9ycy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBFcnJvciBIYW5kbGluZyBTeXN0ZW0gRXhwb3J0c1xuXG5leHBvcnQgKiBmcm9tICcuL3R5cGVzJ1xuZXhwb3J0ICogZnJvbSAnLi9lcnJvci1mYWN0b3J5J1xuZXhwb3J0ICogZnJvbSAnLi9lcnJvci1oYW5kbGVyJ1xuZXhwb3J0ICogZnJvbSAnLi9lcnJvci1sb2dnZXInXG5leHBvcnQgKiBmcm9tICcuL3JldHJ5LWhhbmRsZXInXG5cbi8vIFJlLWV4cG9ydCBjb21tb25seSB1c2VkIGl0ZW1zIGZvciBjb252ZW5pZW5jZVxuZXhwb3J0IHsgXG4gIE93bmx5RXJyb3IsIFxuICBFcnJvckNhdGVnb3J5LCBcbiAgRXJyb3JTZXZlcml0eSwgXG4gIEVSUk9SX0NPREVTIFxufSBmcm9tICcuL3R5cGVzJ1xuXG5leHBvcnQgeyBFcnJvckZhY3RvcnkgfSBmcm9tICcuL2Vycm9yLWZhY3RvcnknXG5leHBvcnQgeyBFcnJvckhhbmRsZXIgfSBmcm9tICcuL2Vycm9yLWhhbmRsZXInXG5leHBvcnQgeyBFcnJvckxvZ2dlciB9IGZyb20gJy4vZXJyb3ItbG9nZ2VyJ1xuZXhwb3J0IHsgUmV0cnlIYW5kbGVyIH0gZnJvbSAnLi9yZXRyeS1oYW5kbGVyJyJdLCJuYW1lcyI6WyJPd25seUVycm9yIiwiRXJyb3JDYXRlZ29yeSIsIkVycm9yU2V2ZXJpdHkiLCJFUlJPUl9DT0RFUyIsIkVycm9yRmFjdG9yeSIsIkVycm9ySGFuZGxlciIsIkVycm9yTG9nZ2VyIiwiUmV0cnlIYW5kbGVyIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/errors/index.ts\n");

/***/ }),

/***/ "(rsc)/./lib/errors/retry-handler.ts":
/*!*************************************!*\
  !*** ./lib/errors/retry-handler.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RetryHandler: () => (/* binding */ RetryHandler)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(rsc)/./lib/errors/types.ts\");\n/* harmony import */ var _lib_hydration_safe_random__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/hydration/safe-random */ \"(rsc)/./lib/hydration/safe-random.ts\");\n// Retry Handler with Exponential Backoff\n\n\nclass RetryHandler {\n    static{\n        this.defaultConfig = {\n            maxAttempts: 3,\n            baseDelay: 1000,\n            maxDelay: 30000,\n            backoffMultiplier: 2,\n            retryableErrors: [\n                'NETWORK_ERROR',\n                'API_TIMEOUT',\n                'API_SERVER_ERROR',\n                'TRANSACTION_TIMEOUT',\n                'IPFS_UPLOAD_FAILED',\n                'SYSTEM_ERROR'\n            ]\n        };\n    }\n    static async executeWithRetry(operation, options = {}) {\n        const config = {\n            ...this.defaultConfig,\n            ...options\n        };\n        let lastError;\n        for(let attempt = 1; attempt <= config.maxAttempts; attempt++){\n            try {\n                return await operation();\n            } catch (error) {\n                lastError = error;\n                // Check if we should retry\n                if (!this.shouldRetry(error, attempt, config, options.shouldRetry)) {\n                    throw error;\n                }\n                // Don't wait after the last attempt\n                if (attempt === config.maxAttempts) {\n                    break;\n                }\n                // Calculate delay with exponential backoff\n                const delay = this.calculateDelay(attempt, config);\n                // Call retry callback if provided\n                options.onRetry?.(attempt, error);\n                // Wait before retrying\n                await this.sleep(delay);\n            }\n        }\n        throw lastError;\n    }\n    static shouldRetry(error, attempt, config, customShouldRetry) {\n        // Use custom retry logic if provided\n        if (customShouldRetry) {\n            return customShouldRetry(error, attempt);\n        }\n        // Don't retry if we've reached max attempts\n        if (attempt >= config.maxAttempts) {\n            return false;\n        }\n        // Check if it's an OwnlyError and if it's retryable\n        if (error instanceof _types__WEBPACK_IMPORTED_MODULE_0__.OwnlyError) {\n            return error.retryable;\n        }\n        // Check if error code is in retryable list\n        if (error instanceof _types__WEBPACK_IMPORTED_MODULE_0__.OwnlyError && config.retryableErrors.includes(error.code)) {\n            return true;\n        }\n        // Default retry logic for common error patterns\n        const errorMessage = error.message.toLowerCase();\n        // Network-related errors\n        if (errorMessage.includes('network') || errorMessage.includes('timeout') || errorMessage.includes('fetch') || errorMessage.includes('connection')) {\n            return true;\n        }\n        // Server errors (5xx)\n        if (errorMessage.includes('server error') || errorMessage.includes('internal error') || errorMessage.includes('service unavailable')) {\n            return true;\n        }\n        return false;\n    }\n    static calculateDelay(attempt, config) {\n        const exponentialDelay = config.baseDelay * Math.pow(config.backoffMultiplier, attempt - 1);\n        // Add jitter to prevent thundering herd\n        const jitter = (0,_lib_hydration_safe_random__WEBPACK_IMPORTED_MODULE_1__.safeRandom)() * 0.1 * exponentialDelay;\n        return Math.min(exponentialDelay + jitter, config.maxDelay);\n    }\n    static sleep(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    // Utility method for retrying specific operations\n    static async retryApiCall(apiCall, operationName, context) {\n        return this.executeWithRetry(apiCall, {\n            maxAttempts: 3,\n            baseDelay: 1000,\n            onRetry: (attempt, error)=>{\n                console.warn(`[RETRY] ${operationName} failed (attempt ${attempt}):`, {\n                    error: error.message,\n                    context\n                });\n            }\n        });\n    }\n    // Utility method for retrying blockchain transactions\n    static async retryTransaction(transaction, transactionName, context) {\n        return this.executeWithRetry(transaction, {\n            maxAttempts: 2,\n            baseDelay: 2000,\n            onRetry: (attempt, error)=>{\n                console.warn(`[RETRY] ${transactionName} failed (attempt ${attempt}):`, {\n                    error: error.message,\n                    context\n                });\n            }\n        });\n    }\n    // Utility method for retrying IPFS operations\n    static async retryIPFS(ipfsOperation, operationName, context) {\n        return this.executeWithRetry(ipfsOperation, {\n            maxAttempts: 4,\n            baseDelay: 500,\n            maxDelay: 10000,\n            onRetry: (attempt, error)=>{\n                console.warn(`[RETRY] IPFS ${operationName} failed (attempt ${attempt}):`, {\n                    error: error.message,\n                    context\n                });\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/errors/retry-handler.ts\n");

/***/ }),

/***/ "(rsc)/./lib/errors/types.ts":
/*!*****************************!*\
  !*** ./lib/errors/types.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERROR_CODES: () => (/* binding */ ERROR_CODES),\n/* harmony export */   ErrorCategory: () => (/* binding */ ErrorCategory),\n/* harmony export */   ErrorSeverity: () => (/* binding */ ErrorSeverity),\n/* harmony export */   OwnlyError: () => (/* binding */ OwnlyError)\n/* harmony export */ });\n// Centralized Error Types and Interfaces\nvar ErrorCategory = /*#__PURE__*/ function(ErrorCategory) {\n    ErrorCategory[\"WALLET\"] = \"WALLET\";\n    ErrorCategory[\"BLOCKCHAIN\"] = \"BLOCKCHAIN\";\n    ErrorCategory[\"API\"] = \"API\";\n    ErrorCategory[\"VALIDATION\"] = \"VALIDATION\";\n    ErrorCategory[\"NETWORK\"] = \"NETWORK\";\n    ErrorCategory[\"IPFS\"] = \"IPFS\";\n    ErrorCategory[\"MARKETPLACE\"] = \"MARKETPLACE\";\n    ErrorCategory[\"AUTHENTICATION\"] = \"AUTHENTICATION\";\n    ErrorCategory[\"TRANSACTION\"] = \"TRANSACTION\";\n    ErrorCategory[\"SYSTEM\"] = \"SYSTEM\";\n    return ErrorCategory;\n}({});\nvar ErrorSeverity = /*#__PURE__*/ function(ErrorSeverity) {\n    ErrorSeverity[\"LOW\"] = \"LOW\";\n    ErrorSeverity[\"MEDIUM\"] = \"MEDIUM\";\n    ErrorSeverity[\"HIGH\"] = \"HIGH\";\n    ErrorSeverity[\"CRITICAL\"] = \"CRITICAL\";\n    return ErrorSeverity;\n}({});\nclass OwnlyError extends Error {\n    constructor(details){\n        super(details.message);\n        this.name = 'OwnlyError';\n        this.code = details.code;\n        this.category = details.category;\n        this.severity = details.severity;\n        this.userMessage = details.userMessage;\n        this.context = details.context;\n        this.originalError = details.originalError;\n        this.retryable = details.retryable;\n        this.retryAfter = details.retryAfter;\n        this.actionable = details.actionable;\n        this.suggestedActions = details.suggestedActions;\n        this.helpUrl = details.helpUrl;\n        this.timestamp = new Date().toISOString();\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            code: this.code,\n            category: this.category,\n            severity: this.severity,\n            message: this.message,\n            userMessage: this.userMessage,\n            context: this.context,\n            retryable: this.retryable,\n            retryAfter: this.retryAfter,\n            actionable: this.actionable,\n            suggestedActions: this.suggestedActions,\n            helpUrl: this.helpUrl,\n            timestamp: this.timestamp,\n            stack: this.stack\n        };\n    }\n}\n// Predefined error codes\nconst ERROR_CODES = {\n    // Wallet errors\n    WALLET_NOT_CONNECTED: 'WALLET_NOT_CONNECTED',\n    WALLET_CONNECTION_FAILED: 'WALLET_CONNECTION_FAILED',\n    WALLET_DISCONNECTED: 'WALLET_DISCONNECTED',\n    WALLET_SIGNATURE_REJECTED: 'WALLET_SIGNATURE_REJECTED',\n    WALLET_INSUFFICIENT_FUNDS: 'WALLET_INSUFFICIENT_FUNDS',\n    // Blockchain errors\n    TRANSACTION_FAILED: 'TRANSACTION_FAILED',\n    TRANSACTION_TIMEOUT: 'TRANSACTION_TIMEOUT',\n    TRANSACTION_REJECTED: 'TRANSACTION_REJECTED',\n    BLOCK_NOT_FOUND: 'BLOCK_NOT_FOUND',\n    CONTRACT_ERROR: 'CONTRACT_ERROR',\n    // API errors\n    API_TIMEOUT: 'API_TIMEOUT',\n    API_RATE_LIMITED: 'API_RATE_LIMITED',\n    API_UNAUTHORIZED: 'API_UNAUTHORIZED',\n    API_SERVER_ERROR: 'API_SERVER_ERROR',\n    API_NOT_FOUND: 'API_NOT_FOUND',\n    // Validation errors\n    INVALID_ADDRESS: 'INVALID_ADDRESS',\n    INVALID_NFT_ID: 'INVALID_NFT_ID',\n    INVALID_METADATA: 'INVALID_METADATA',\n    INVALID_PRICE: 'INVALID_PRICE',\n    MISSING_REQUIRED_FIELD: 'MISSING_REQUIRED_FIELD',\n    // Network errors\n    NETWORK_OFFLINE: 'NETWORK_OFFLINE',\n    NETWORK_TIMEOUT: 'NETWORK_TIMEOUT',\n    NETWORK_ERROR: 'NETWORK_ERROR',\n    // IPFS errors\n    IPFS_UPLOAD_FAILED: 'IPFS_UPLOAD_FAILED',\n    IPFS_FETCH_FAILED: 'IPFS_FETCH_FAILED',\n    IPFS_INVALID_HASH: 'IPFS_INVALID_HASH',\n    // Marketplace errors\n    NFT_NOT_FOR_SALE: 'NFT_NOT_FOR_SALE',\n    NFT_ALREADY_SOLD: 'NFT_ALREADY_SOLD',\n    LISTING_EXPIRED: 'LISTING_EXPIRED',\n    INSUFFICIENT_BALANCE: 'INSUFFICIENT_BALANCE',\n    // Authentication errors\n    AUTH_FAILED: 'AUTH_FAILED',\n    AUTH_EXPIRED: 'AUTH_EXPIRED',\n    AUTH_INVALID_TOKEN: 'AUTH_INVALID_TOKEN',\n    // System errors\n    SYSTEM_ERROR: 'SYSTEM_ERROR',\n    DATABASE_ERROR: 'DATABASE_ERROR',\n    CACHE_ERROR: 'CACHE_ERROR'\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/errors/types.ts\n");

/***/ }),

/***/ "(rsc)/./lib/flow/config.ts":
/*!****************************!*\
  !*** ./lib/flow/config.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DAPPER_CONTRACTS: () => (/* binding */ DAPPER_CONTRACTS),\n/* harmony export */   FLOW_ACCESS_API: () => (/* binding */ FLOW_ACCESS_API),\n/* harmony export */   FLOW_NETWORK: () => (/* binding */ FLOW_NETWORK),\n/* harmony export */   IPFS_GATEWAY: () => (/* binding */ IPFS_GATEWAY),\n/* harmony export */   NFT_STORAGE_API_KEY: () => (/* binding */ NFT_STORAGE_API_KEY),\n/* harmony export */   OWNLY_COLLECTION_ID: () => (/* binding */ OWNLY_COLLECTION_ID),\n/* harmony export */   getAccessAPIEndpoint: () => (/* binding */ getAccessAPIEndpoint),\n/* harmony export */   getContractAddress: () => (/* binding */ getContractAddress),\n/* harmony export */   resolveContractAddress: () => (/* binding */ resolveContractAddress)\n/* harmony export */ });\n/* harmony import */ var _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/fcl */ \"(rsc)/./node_modules/@onflow/fcl/dist/fcl.module.js\");\n\n// Flow network configuration\nconst FLOW_NETWORK = \"testnet\" || 0;\n// Configure FCL\n_onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.config().put(\"app.detail.title\", \"Ownly\").put(\"app.detail.icon\", \"https://ownly.app/icon.png\").put(\"flow.network\", FLOW_NETWORK).put(\"accessNode.api\", FLOW_NETWORK === \"mainnet\" ? \"https://rest-mainnet.onflow.org\" : \"https://rest-testnet.onflow.org\").put(\"discovery.wallet\", FLOW_NETWORK === \"mainnet\" ? \"https://fcl-discovery.onflow.org/authn\" : \"https://fcl-discovery.onflow.org/testnet/authn\").put(\"discovery.wallet.method\", \"IFRAME/RPC\");\n// Dapper Core Contract Addresses\nconst DAPPER_CONTRACTS = {\n    testnet: {\n        NonFungibleToken: \"0x631e88ae7f1d7c20\",\n        MetadataViews: \"0x631e88ae7f1d7c20\",\n        DapperCollectibles: \"0x82ec283f88a62e65\",\n        DapperMarket: \"0x94b06cfca1d8a476\",\n        NFTStorefront: \"0x94b06cfca1d8a476\",\n        FungibleToken: \"0x9a0766d93b6608b7\",\n        FlowToken: \"0x7e60df042a9c0868\"\n    },\n    mainnet: {\n        NonFungibleToken: \"0x1d7e57aa55817448\",\n        MetadataViews: \"0x1d7e57aa55817448\",\n        DapperCollectibles: \"0x82ec283f88a62e65\",\n        DapperMarket: \"0x4eb8a10cb9f87357\",\n        NFTStorefront: \"0x4eb8a10cb9f87357\",\n        FungibleToken: \"0xf233dcee88fe0abe\",\n        FlowToken: \"0x1654653399040a61\"\n    }\n};\nconst getContractAddress = (contractName)=>{\n    return DAPPER_CONTRACTS[FLOW_NETWORK][contractName];\n};\n// Enhanced contract address resolution with validation\nconst resolveContractAddress = (contractName, network)=>{\n    const targetNetwork = network || FLOW_NETWORK;\n    const contracts = DAPPER_CONTRACTS[targetNetwork];\n    if (!contracts) {\n        throw new Error(`Unsupported network: ${targetNetwork}`);\n    }\n    const address = contracts[contractName];\n    if (!address) {\n        throw new Error(`Contract ${contractName} not found for network ${targetNetwork}`);\n    }\n    return address;\n};\n// Collection ID for Ownly collectibles\nconst OWNLY_COLLECTION_ID = \"ownly_collectibles\";\n// Flow Access API configuration\nconst FLOW_ACCESS_API = {\n    testnet: {\n        rest: \"https://rest-testnet.onflow.org\",\n        grpc: \"access-testnet.onflow.org:9000\"\n    },\n    mainnet: {\n        rest: \"https://rest-mainnet.onflow.org\",\n        grpc: \"access-mainnet.onflow.org:9000\"\n    }\n};\nconst getAccessAPIEndpoint = (type = 'rest')=>{\n    return FLOW_ACCESS_API[FLOW_NETWORK][type];\n};\n// IPFS Configuration\nconst IPFS_GATEWAY = \"https://nftstorage.link/ipfs/\";\nconst NFT_STORAGE_API_KEY = process.env.NEXT_PUBLIC_NFT_STORAGE_KEY || \"\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZmxvdy9jb25maWcudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFrQztBQUVsQyw2QkFBNkI7QUFDdEIsTUFBTUMsZUFBZUMsU0FBb0MsSUFBSSxDQUFTO0FBRTdFLGdCQUFnQjtBQUNoQkYsK0NBQ1MsR0FDTk0sR0FBRyxDQUFDLG9CQUFvQixTQUN4QkEsR0FBRyxDQUFDLG1CQUFtQiw4QkFDdkJBLEdBQUcsQ0FBQyxnQkFBZ0JMLGNBQ3BCSyxHQUFHLENBQ0Ysa0JBQ0FMLGlCQUFpQixZQUFZLG9DQUFvQyxtQ0FFbEVLLEdBQUcsQ0FDRixvQkFDQUwsaUJBQWlCLFlBQ2IsMkNBQ0Esa0RBRUxLLEdBQUcsQ0FBQywyQkFBMkI7QUFFbEMsaUNBQWlDO0FBQzFCLE1BQU1DLG1CQUFtQjtJQUM5QkMsU0FBUztRQUNQQyxrQkFBa0I7UUFDbEJDLGVBQWU7UUFDZkMsb0JBQW9CO1FBQ3BCQyxjQUFjO1FBQ2RDLGVBQWU7UUFDZkMsZUFBZTtRQUNmQyxXQUFXO0lBQ2I7SUFDQUMsU0FBUztRQUNQUCxrQkFBa0I7UUFDbEJDLGVBQWU7UUFDZkMsb0JBQW9CO1FBQ3BCQyxjQUFjO1FBQ2RDLGVBQWU7UUFDZkMsZUFBZTtRQUNmQyxXQUFXO0lBQ2I7QUFDRixFQUFDO0FBRU0sTUFBTUUscUJBQXFCLENBQUNDO0lBQ2pDLE9BQU9YLGdCQUFnQixDQUFDTixhQUE4QyxDQUFDaUIsYUFBYTtBQUN0RixFQUFDO0FBRUQsdURBQXVEO0FBQ2hELE1BQU1DLHlCQUF5QixDQUFDRCxjQUFzQkU7SUFDM0QsTUFBTUMsZ0JBQWdCRCxXQUFXbkI7SUFDakMsTUFBTXFCLFlBQVlmLGdCQUFnQixDQUFDYyxjQUErQztJQUVsRixJQUFJLENBQUNDLFdBQVc7UUFDZCxNQUFNLElBQUlDLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRUYsZUFBZTtJQUN6RDtJQUVBLE1BQU1HLFVBQVVGLFNBQVMsQ0FBQ0osYUFBdUM7SUFDakUsSUFBSSxDQUFDTSxTQUFTO1FBQ1osTUFBTSxJQUFJRCxNQUFNLENBQUMsU0FBUyxFQUFFTCxhQUFhLHVCQUF1QixFQUFFRyxlQUFlO0lBQ25GO0lBRUEsT0FBT0c7QUFDVCxFQUFDO0FBRUQsdUNBQXVDO0FBQ2hDLE1BQU1DLHNCQUFzQixxQkFBb0I7QUFFdkQsZ0NBQWdDO0FBQ3pCLE1BQU1DLGtCQUFrQjtJQUM3QmxCLFNBQVM7UUFDUG1CLE1BQU07UUFDTkMsTUFBTTtJQUNSO0lBQ0FaLFNBQVM7UUFDUFcsTUFBTTtRQUNOQyxNQUFNO0lBQ1I7QUFDRixFQUFDO0FBRU0sTUFBTUMsdUJBQXVCLENBQUNDLE9BQXdCLE1BQU07SUFDakUsT0FBT0osZUFBZSxDQUFDekIsYUFBNkMsQ0FBQzZCLEtBQUs7QUFDNUUsRUFBQztBQUVELHFCQUFxQjtBQUNkLE1BQU1DLGVBQWUsZ0NBQStCO0FBQ3BELE1BQU1DLHNCQUFzQjlCLFFBQVFDLEdBQUcsQ0FBQzhCLDJCQUEyQixJQUFJLEdBQUUiLCJzb3VyY2VzIjpbIi9ob21lL2FsdGNvaW4tZGFkZHkvRG93bmxvYWRzL293bmx5L2xpYi9mbG93L2NvbmZpZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmY2wgZnJvbSBcIkBvbmZsb3cvZmNsXCJcblxuLy8gRmxvdyBuZXR3b3JrIGNvbmZpZ3VyYXRpb25cbmV4cG9ydCBjb25zdCBGTE9XX05FVFdPUksgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19GTE9XX05FVFdPUksgfHwgXCJ0ZXN0bmV0XCJcblxuLy8gQ29uZmlndXJlIEZDTFxuZmNsXG4gIC5jb25maWcoKVxuICAucHV0KFwiYXBwLmRldGFpbC50aXRsZVwiLCBcIk93bmx5XCIpXG4gIC5wdXQoXCJhcHAuZGV0YWlsLmljb25cIiwgXCJodHRwczovL293bmx5LmFwcC9pY29uLnBuZ1wiKVxuICAucHV0KFwiZmxvdy5uZXR3b3JrXCIsIEZMT1dfTkVUV09SSylcbiAgLnB1dChcbiAgICBcImFjY2Vzc05vZGUuYXBpXCIsXG4gICAgRkxPV19ORVRXT1JLID09PSBcIm1haW5uZXRcIiA/IFwiaHR0cHM6Ly9yZXN0LW1haW5uZXQub25mbG93Lm9yZ1wiIDogXCJodHRwczovL3Jlc3QtdGVzdG5ldC5vbmZsb3cub3JnXCIsXG4gIClcbiAgLnB1dChcbiAgICBcImRpc2NvdmVyeS53YWxsZXRcIixcbiAgICBGTE9XX05FVFdPUksgPT09IFwibWFpbm5ldFwiXG4gICAgICA/IFwiaHR0cHM6Ly9mY2wtZGlzY292ZXJ5Lm9uZmxvdy5vcmcvYXV0aG5cIlxuICAgICAgOiBcImh0dHBzOi8vZmNsLWRpc2NvdmVyeS5vbmZsb3cub3JnL3Rlc3RuZXQvYXV0aG5cIixcbiAgKVxuICAucHV0KFwiZGlzY292ZXJ5LndhbGxldC5tZXRob2RcIiwgXCJJRlJBTUUvUlBDXCIpXG5cbi8vIERhcHBlciBDb3JlIENvbnRyYWN0IEFkZHJlc3Nlc1xuZXhwb3J0IGNvbnN0IERBUFBFUl9DT05UUkFDVFMgPSB7XG4gIHRlc3RuZXQ6IHtcbiAgICBOb25GdW5naWJsZVRva2VuOiBcIjB4NjMxZTg4YWU3ZjFkN2MyMFwiLFxuICAgIE1ldGFkYXRhVmlld3M6IFwiMHg2MzFlODhhZTdmMWQ3YzIwXCIsXG4gICAgRGFwcGVyQ29sbGVjdGlibGVzOiBcIjB4ODJlYzI4M2Y4OGE2MmU2NVwiLCAvLyBEYXBwZXIgQ29yZSBORlQgY29udHJhY3RcbiAgICBEYXBwZXJNYXJrZXQ6IFwiMHg5NGIwNmNmY2ExZDhhNDc2XCIsIC8vIERhcHBlciBtYXJrZXRwbGFjZSBjb250cmFjdFxuICAgIE5GVFN0b3JlZnJvbnQ6IFwiMHg5NGIwNmNmY2ExZDhhNDc2XCIsXG4gICAgRnVuZ2libGVUb2tlbjogXCIweDlhMDc2NmQ5M2I2NjA4YjdcIixcbiAgICBGbG93VG9rZW46IFwiMHg3ZTYwZGYwNDJhOWMwODY4XCIsXG4gIH0sXG4gIG1haW5uZXQ6IHtcbiAgICBOb25GdW5naWJsZVRva2VuOiBcIjB4MWQ3ZTU3YWE1NTgxNzQ0OFwiLFxuICAgIE1ldGFkYXRhVmlld3M6IFwiMHgxZDdlNTdhYTU1ODE3NDQ4XCIsIFxuICAgIERhcHBlckNvbGxlY3RpYmxlczogXCIweDgyZWMyODNmODhhNjJlNjVcIiwgLy8gRGFwcGVyIENvcmUgTkZUIGNvbnRyYWN0XG4gICAgRGFwcGVyTWFya2V0OiBcIjB4NGViOGExMGNiOWY4NzM1N1wiLCAvLyBEYXBwZXIgbWFya2V0cGxhY2UgY29udHJhY3RcbiAgICBORlRTdG9yZWZyb250OiBcIjB4NGViOGExMGNiOWY4NzM1N1wiLFxuICAgIEZ1bmdpYmxlVG9rZW46IFwiMHhmMjMzZGNlZTg4ZmUwYWJlXCIsXG4gICAgRmxvd1Rva2VuOiBcIjB4MTY1NDY1MzM5OTA0MGE2MVwiLFxuICB9LFxufVxuXG5leHBvcnQgY29uc3QgZ2V0Q29udHJhY3RBZGRyZXNzID0gKGNvbnRyYWN0TmFtZToga2V5b2YgdHlwZW9mIERBUFBFUl9DT05UUkFDVFMudGVzdG5ldCkgPT4ge1xuICByZXR1cm4gREFQUEVSX0NPTlRSQUNUU1tGTE9XX05FVFdPUksgYXMga2V5b2YgdHlwZW9mIERBUFBFUl9DT05UUkFDVFNdW2NvbnRyYWN0TmFtZV1cbn1cblxuLy8gRW5oYW5jZWQgY29udHJhY3QgYWRkcmVzcyByZXNvbHV0aW9uIHdpdGggdmFsaWRhdGlvblxuZXhwb3J0IGNvbnN0IHJlc29sdmVDb250cmFjdEFkZHJlc3MgPSAoY29udHJhY3ROYW1lOiBzdHJpbmcsIG5ldHdvcms/OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICBjb25zdCB0YXJnZXROZXR3b3JrID0gbmV0d29yayB8fCBGTE9XX05FVFdPUktcbiAgY29uc3QgY29udHJhY3RzID0gREFQUEVSX0NPTlRSQUNUU1t0YXJnZXROZXR3b3JrIGFzIGtleW9mIHR5cGVvZiBEQVBQRVJfQ09OVFJBQ1RTXVxuICBcbiAgaWYgKCFjb250cmFjdHMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIG5ldHdvcms6ICR7dGFyZ2V0TmV0d29ya31gKVxuICB9XG4gIFxuICBjb25zdCBhZGRyZXNzID0gY29udHJhY3RzW2NvbnRyYWN0TmFtZSBhcyBrZXlvZiB0eXBlb2YgY29udHJhY3RzXVxuICBpZiAoIWFkZHJlc3MpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvbnRyYWN0ICR7Y29udHJhY3ROYW1lfSBub3QgZm91bmQgZm9yIG5ldHdvcmsgJHt0YXJnZXROZXR3b3JrfWApXG4gIH1cbiAgXG4gIHJldHVybiBhZGRyZXNzXG59XG5cbi8vIENvbGxlY3Rpb24gSUQgZm9yIE93bmx5IGNvbGxlY3RpYmxlc1xuZXhwb3J0IGNvbnN0IE9XTkxZX0NPTExFQ1RJT05fSUQgPSBcIm93bmx5X2NvbGxlY3RpYmxlc1wiXG5cbi8vIEZsb3cgQWNjZXNzIEFQSSBjb25maWd1cmF0aW9uXG5leHBvcnQgY29uc3QgRkxPV19BQ0NFU1NfQVBJID0ge1xuICB0ZXN0bmV0OiB7XG4gICAgcmVzdDogXCJodHRwczovL3Jlc3QtdGVzdG5ldC5vbmZsb3cub3JnXCIsXG4gICAgZ3JwYzogXCJhY2Nlc3MtdGVzdG5ldC5vbmZsb3cub3JnOjkwMDBcIixcbiAgfSxcbiAgbWFpbm5ldDoge1xuICAgIHJlc3Q6IFwiaHR0cHM6Ly9yZXN0LW1haW5uZXQub25mbG93Lm9yZ1wiLCBcbiAgICBncnBjOiBcImFjY2Vzcy1tYWlubmV0Lm9uZmxvdy5vcmc6OTAwMFwiLFxuICB9LFxufVxuXG5leHBvcnQgY29uc3QgZ2V0QWNjZXNzQVBJRW5kcG9pbnQgPSAodHlwZTogJ3Jlc3QnIHwgJ2dycGMnID0gJ3Jlc3QnKSA9PiB7XG4gIHJldHVybiBGTE9XX0FDQ0VTU19BUElbRkxPV19ORVRXT1JLIGFzIGtleW9mIHR5cGVvZiBGTE9XX0FDQ0VTU19BUEldW3R5cGVdXG59XG5cbi8vIElQRlMgQ29uZmlndXJhdGlvblxuZXhwb3J0IGNvbnN0IElQRlNfR0FURVdBWSA9IFwiaHR0cHM6Ly9uZnRzdG9yYWdlLmxpbmsvaXBmcy9cIlxuZXhwb3J0IGNvbnN0IE5GVF9TVE9SQUdFX0FQSV9LRVkgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19ORlRfU1RPUkFHRV9LRVkgfHwgXCJcIlxuIl0sIm5hbWVzIjpbImZjbCIsIkZMT1dfTkVUV09SSyIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19GTE9XX05FVFdPUksiLCJjb25maWciLCJwdXQiLCJEQVBQRVJfQ09OVFJBQ1RTIiwidGVzdG5ldCIsIk5vbkZ1bmdpYmxlVG9rZW4iLCJNZXRhZGF0YVZpZXdzIiwiRGFwcGVyQ29sbGVjdGlibGVzIiwiRGFwcGVyTWFya2V0IiwiTkZUU3RvcmVmcm9udCIsIkZ1bmdpYmxlVG9rZW4iLCJGbG93VG9rZW4iLCJtYWlubmV0IiwiZ2V0Q29udHJhY3RBZGRyZXNzIiwiY29udHJhY3ROYW1lIiwicmVzb2x2ZUNvbnRyYWN0QWRkcmVzcyIsIm5ldHdvcmsiLCJ0YXJnZXROZXR3b3JrIiwiY29udHJhY3RzIiwiRXJyb3IiLCJhZGRyZXNzIiwiT1dOTFlfQ09MTEVDVElPTl9JRCIsIkZMT1dfQUNDRVNTX0FQSSIsInJlc3QiLCJncnBjIiwiZ2V0QWNjZXNzQVBJRW5kcG9pbnQiLCJ0eXBlIiwiSVBGU19HQVRFV0FZIiwiTkZUX1NUT1JBR0VfQVBJX0tFWSIsIk5FWFRfUFVCTElDX05GVF9TVE9SQUdFX0tFWSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/flow/config.ts\n");

/***/ }),

/***/ "(rsc)/./lib/flow/ipfs.ts":
/*!**************************!*\
  !*** ./lib/flow/ipfs.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_FILE_SIZE: () => (/* binding */ MAX_FILE_SIZE),\n/* harmony export */   SUPPORTED_IMAGE_TYPES: () => (/* binding */ SUPPORTED_IMAGE_TYPES),\n/* harmony export */   SUPPORTED_MEDIA_TYPES: () => (/* binding */ SUPPORTED_MEDIA_TYPES),\n/* harmony export */   SUPPORTED_VIDEO_TYPES: () => (/* binding */ SUPPORTED_VIDEO_TYPES),\n/* harmony export */   createOwnlyMetadata: () => (/* binding */ createOwnlyMetadata),\n/* harmony export */   fileToNFTStorageFile: () => (/* binding */ fileToNFTStorageFile),\n/* harmony export */   getFileCategory: () => (/* binding */ getFileCategory),\n/* harmony export */   getIPFSUrl: () => (/* binding */ getIPFSUrl),\n/* harmony export */   processUploadedFile: () => (/* binding */ processUploadedFile),\n/* harmony export */   uploadToIPFS: () => (/* binding */ uploadToIPFS),\n/* harmony export */   validateMediaFile: () => (/* binding */ validateMediaFile),\n/* harmony export */   validateMetadata: () => (/* binding */ validateMetadata)\n/* harmony export */ });\n/* harmony import */ var nft_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nft.storage */ \"(rsc)/./node_modules/nft.storage/src/lib.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"(rsc)/./lib/flow/config.ts\");\n\n\n// Initialize NFT.Storage client\nconst client = _config__WEBPACK_IMPORTED_MODULE_1__.NFT_STORAGE_API_KEY ? new nft_storage__WEBPACK_IMPORTED_MODULE_0__.NFTStorage({\n    token: _config__WEBPACK_IMPORTED_MODULE_1__.NFT_STORAGE_API_KEY\n}) : null;\n// Supported file types for NFT media\nconst SUPPORTED_IMAGE_TYPES = [\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp'\n];\nconst SUPPORTED_VIDEO_TYPES = [\n    'video/mp4',\n    'video/webm',\n    'video/mov'\n];\nconst SUPPORTED_MEDIA_TYPES = [\n    ...SUPPORTED_IMAGE_TYPES,\n    ...SUPPORTED_VIDEO_TYPES\n];\n// Maximum file size (10MB)\nconst MAX_FILE_SIZE = 10 * 1024 * 1024;\n// Validate file type and size\nfunction validateMediaFile(file) {\n    const errors = [];\n    // Check file type\n    if (!SUPPORTED_MEDIA_TYPES.includes(file.type)) {\n        errors.push({\n            field: 'file',\n            message: `Unsupported file type. Supported types: ${SUPPORTED_MEDIA_TYPES.join(', ')}`\n        });\n    }\n    // Check file size\n    if (file.size > MAX_FILE_SIZE) {\n        errors.push({\n            field: 'file',\n            message: `File size too large. Maximum size: ${MAX_FILE_SIZE / (1024 * 1024)}MB`\n        });\n    }\n    return errors;\n}\n// Validate metadata fields\nfunction validateMetadata(metadata) {\n    const errors = [];\n    // Required fields validation\n    if (!metadata.name || metadata.name.trim().length === 0) {\n        errors.push({\n            field: 'name',\n            message: 'Name is required'\n        });\n    } else if (metadata.name.length > 100) {\n        errors.push({\n            field: 'name',\n            message: 'Name must be less than 100 characters'\n        });\n    }\n    if (!metadata.description || metadata.description.trim().length === 0) {\n        errors.push({\n            field: 'description',\n            message: 'Description is required'\n        });\n    } else if (metadata.description.length > 1000) {\n        errors.push({\n            field: 'description',\n            message: 'Description must be less than 1000 characters'\n        });\n    }\n    if (!metadata.category || metadata.category.trim().length === 0) {\n        errors.push({\n            field: 'category',\n            message: 'Category is required'\n        });\n    }\n    if (!metadata.creator || metadata.creator.trim().length === 0) {\n        errors.push({\n            field: 'creator',\n            message: 'Creator address is required'\n        });\n    }\n    // Validate attributes if provided\n    if (metadata.attributes) {\n        metadata.attributes.forEach((attr, index)=>{\n            if (!attr.trait_type || attr.trait_type.trim().length === 0) {\n                errors.push({\n                    field: `attributes[${index}].trait_type`,\n                    message: 'Attribute trait_type is required'\n                });\n            }\n            if (attr.value === undefined || attr.value === null || attr.value === '') {\n                errors.push({\n                    field: `attributes[${index}].value`,\n                    message: 'Attribute value is required'\n                });\n            }\n        });\n    }\n    return errors;\n}\n// Upload NFT to IPFS with enhanced validation and metadata structure\nasync function uploadToIPFS(metadata) {\n    if (!client) {\n        throw new Error(\"NFT.Storage API key not configured\");\n    }\n    // Validate metadata\n    const metadataErrors = validateMetadata(metadata);\n    if (metadataErrors.length > 0) {\n        throw new Error(`Metadata validation failed: ${metadataErrors.map((e)=>e.message).join(', ')}`);\n    }\n    // Validate media file\n    const fileErrors = validateMediaFile(metadata.image);\n    if (fileErrors.length > 0) {\n        throw new Error(`File validation failed: ${fileErrors.map((e)=>e.message).join(', ')}`);\n    }\n    try {\n        console.log(\"[IPFS] Uploading Ownly collectible to IPFS...\");\n        // Prepare metadata for NFT.Storage\n        const nftStorageMetadata = {\n            name: metadata.name,\n            description: metadata.description,\n            image: metadata.image,\n            properties: {\n                category: metadata.category,\n                creator: metadata.creator,\n                collection_id: metadata.collection_id,\n                ...metadata.attributes && {\n                    attributes: metadata.attributes\n                },\n                ...metadata.external_url && {\n                    external_url: metadata.external_url\n                }\n            },\n            ...metadata.animation_url && {\n                animation_url: metadata.animation_url\n            }\n        };\n        // Store the NFT data\n        const nftMetadata = await client.store(nftStorageMetadata);\n        const ipfsHash = nftMetadata.url.replace(\"ipfs://\", \"\");\n        const metadataUrl = `${_config__WEBPACK_IMPORTED_MODULE_1__.IPFS_GATEWAY}${ipfsHash}/metadata.json`;\n        const imageUrl = nftMetadata.data.image.toString().replace(\"ipfs://\", _config__WEBPACK_IMPORTED_MODULE_1__.IPFS_GATEWAY);\n        const result = {\n            ipfsHash,\n            metadataUrl,\n            imageUrl\n        };\n        // Add animation URL if it exists\n        if (nftMetadata.data.animation_url) {\n            result.animationUrl = nftMetadata.data.animation_url.toString().replace(\"ipfs://\", _config__WEBPACK_IMPORTED_MODULE_1__.IPFS_GATEWAY);\n        }\n        console.log(\"[IPFS] Upload complete:\", result);\n        return result;\n    } catch (error) {\n        console.error(\"[IPFS] Upload error:\", error);\n        throw new Error(`IPFS upload failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n}\n// Get IPFS URL from hash\nfunction getIPFSUrl(hash) {\n    return `${_config__WEBPACK_IMPORTED_MODULE_1__.IPFS_GATEWAY}${hash}`;\n}\n// Convert browser File to NFT.Storage File format\nasync function fileToNFTStorageFile(file) {\n    const buffer = await file.arrayBuffer();\n    return new nft_storage__WEBPACK_IMPORTED_MODULE_0__.File([\n        buffer\n    ], file.name, {\n        type: file.type\n    });\n}\n// Process and validate uploaded file\nasync function processUploadedFile(file) {\n    // Validate the file\n    const errors = validateMediaFile(file);\n    if (errors.length > 0) {\n        throw new Error(`File validation failed: ${errors.map((e)=>e.message).join(', ')}`);\n    }\n    // Convert to NFT.Storage format\n    const processedFile = await fileToNFTStorageFile(file);\n    const fileInfo = {\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        isVideo: SUPPORTED_VIDEO_TYPES.includes(file.type),\n        isImage: SUPPORTED_IMAGE_TYPES.includes(file.type)\n    };\n    return {\n        processedFile,\n        fileInfo\n    };\n}\n// Create metadata structure for Ownly collectibles\nfunction createOwnlyMetadata(params) {\n    return {\n        name: params.name.trim(),\n        description: params.description.trim(),\n        category: params.category.trim(),\n        creator: params.creator.trim(),\n        collection_id: _config__WEBPACK_IMPORTED_MODULE_1__.OWNLY_COLLECTION_ID,\n        image: params.image,\n        attributes: params.attributes || [],\n        external_url: params.external_url?.trim()\n    };\n}\n// Utility to get file type category\nfunction getFileCategory(file) {\n    if (SUPPORTED_IMAGE_TYPES.includes(file.type)) return 'image';\n    if (SUPPORTED_VIDEO_TYPES.includes(file.type)) return 'video';\n    return 'unknown';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/flow/ipfs.ts\n");

/***/ }),

/***/ "(rsc)/./lib/hydration/safe-random.ts":
/*!**************************************!*\
  !*** ./lib/hydration/safe-random.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initializeSafeRandom: () => (/* binding */ initializeSafeRandom),\n/* harmony export */   resetIdCounter: () => (/* binding */ resetIdCounter),\n/* harmony export */   safeDateFromNow: () => (/* binding */ safeDateFromNow),\n/* harmony export */   safeDateNow: () => (/* binding */ safeDateNow),\n/* harmony export */   safeGenerateId: () => (/* binding */ safeGenerateId),\n/* harmony export */   safeProgressIncrement: () => (/* binding */ safeProgressIncrement),\n/* harmony export */   safeRandom: () => (/* binding */ safeRandom),\n/* harmony export */   safeRandomFloat: () => (/* binding */ safeRandomFloat),\n/* harmony export */   safeRandomInt: () => (/* binding */ safeRandomInt),\n/* harmony export */   safeRandomWidth: () => (/* binding */ safeRandomWidth)\n/* harmony export */ });\n/**\n * Safe random utilities for SSR/client consistency\n * Provides deterministic alternatives to Math.random() and Date.now()\n * to prevent hydration mismatches\n */ // Simple seeded random number generator (Linear Congruential Generator)\nclass SeededRandom {\n    constructor(seed = 1){\n        this.seed = seed;\n    }\n    next() {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n    nextInt(min, max) {\n        return Math.floor(this.next() * (max - min + 1)) + min;\n    }\n    nextFloat(min, max) {\n        return this.next() * (max - min) + min;\n    }\n}\n// Global seeded random instance\nlet globalSeededRandom = null;\n/**\n * Initialize the seeded random generator with a consistent seed\n * This should be called once during app initialization\n */ function initializeSafeRandom(seed) {\n    // Use a consistent seed based on build time or a fixed value\n    const defaultSeed = 12345 // Fixed seed for consistency\n    ;\n    globalSeededRandom = new SeededRandom(seed ?? defaultSeed);\n}\n/**\n * Get a deterministic random number between 0 and 1\n * Safe for SSR as it produces the same sequence on server and client\n */ function safeRandom() {\n    if (!globalSeededRandom) {\n        initializeSafeRandom();\n    }\n    return globalSeededRandom.next();\n}\n/**\n * Get a deterministic random integer between min and max (inclusive)\n */ function safeRandomInt(min, max) {\n    if (!globalSeededRandom) {\n        initializeSafeRandom();\n    }\n    return globalSeededRandom.nextInt(min, max);\n}\n/**\n * Get a deterministic random float between min and max\n */ function safeRandomFloat(min, max) {\n    if (!globalSeededRandom) {\n        initializeSafeRandom();\n    }\n    return globalSeededRandom.nextFloat(min, max);\n}\n/**\n * Generate a consistent percentage width for skeleton components\n * Returns a percentage string like \"65%\"\n */ function safeRandomWidth(min = 50, max = 90) {\n    return `${safeRandomInt(min, max)}%`;\n}\n/**\n * Safe alternative to Date.now() that returns a consistent timestamp\n * during SSR and initial client render\n */ function safeDateNow() {\n    // During SSR or initial render, return a fixed timestamp\n    if (true) {\n        // Return a fixed timestamp for consistency\n        return 1640995200000 // Jan 1, 2022 00:00:00 UTC\n        ;\n    }\n    // On client after hydration, return actual current time\n    return Date.now();\n}\n/**\n * Create a safe date object that's consistent during SSR\n */ function safeDateFromNow(offsetMs) {\n    return new Date(safeDateNow() + offsetMs);\n}\n/**\n * Generate a deterministic progress increment for animations\n * Safe alternative to Math.random() * 10 for progress bars\n */ function safeProgressIncrement(min = 2, max = 8) {\n    return safeRandomFloat(min, max);\n}\n/**\n * Generate a consistent ID that's safe for SSR\n * Uses a counter instead of random numbers or timestamps\n */ let idCounter = 0;\nfunction safeGenerateId(prefix = 'id') {\n    return `${prefix}-${++idCounter}`;\n}\n/**\n * Reset the ID counter (useful for testing)\n */ function resetIdCounter() {\n    idCounter = 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvaHlkcmF0aW9uL3NhZmUtcmFuZG9tLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztDQUlDLEdBRUQsd0VBQXdFO0FBQ3hFLE1BQU1BO0lBR0pDLFlBQVlDLE9BQWUsQ0FBQyxDQUFFO1FBQzVCLElBQUksQ0FBQ0EsSUFBSSxHQUFHQTtJQUNkO0lBRUFDLE9BQWU7UUFDYixJQUFJLENBQUNELElBQUksR0FBRyxDQUFDLElBQUksQ0FBQ0EsSUFBSSxHQUFHLE9BQU8sS0FBSSxJQUFLO1FBQ3pDLE9BQU8sSUFBSSxDQUFDQSxJQUFJLEdBQUc7SUFDckI7SUFFQUUsUUFBUUMsR0FBVyxFQUFFQyxHQUFXLEVBQVU7UUFDeEMsT0FBT0MsS0FBS0MsS0FBSyxDQUFDLElBQUksQ0FBQ0wsSUFBSSxLQUFNRyxDQUFBQSxNQUFNRCxNQUFNLE1BQU1BO0lBQ3JEO0lBRUFJLFVBQVVKLEdBQVcsRUFBRUMsR0FBVyxFQUFVO1FBQzFDLE9BQU8sSUFBSSxDQUFDSCxJQUFJLEtBQU1HLENBQUFBLE1BQU1ELEdBQUUsSUFBS0E7SUFDckM7QUFDRjtBQUVBLGdDQUFnQztBQUNoQyxJQUFJSyxxQkFBMEM7QUFFOUM7OztDQUdDLEdBQ00sU0FBU0MscUJBQXFCVCxJQUFhO0lBQ2hELDZEQUE2RDtJQUM3RCxNQUFNVSxjQUFjLE1BQU0sNkJBQTZCOztJQUN2REYscUJBQXFCLElBQUlWLGFBQWFFLFFBQVFVO0FBQ2hEO0FBRUE7OztDQUdDLEdBQ00sU0FBU0M7SUFDZCxJQUFJLENBQUNILG9CQUFvQjtRQUN2QkM7SUFDRjtJQUNBLE9BQU9ELG1CQUFvQlAsSUFBSTtBQUNqQztBQUVBOztDQUVDLEdBQ00sU0FBU1csY0FBY1QsR0FBVyxFQUFFQyxHQUFXO0lBQ3BELElBQUksQ0FBQ0ksb0JBQW9CO1FBQ3ZCQztJQUNGO0lBQ0EsT0FBT0QsbUJBQW9CTixPQUFPLENBQUNDLEtBQUtDO0FBQzFDO0FBRUE7O0NBRUMsR0FDTSxTQUFTUyxnQkFBZ0JWLEdBQVcsRUFBRUMsR0FBVztJQUN0RCxJQUFJLENBQUNJLG9CQUFvQjtRQUN2QkM7SUFDRjtJQUNBLE9BQU9ELG1CQUFvQkQsU0FBUyxDQUFDSixLQUFLQztBQUM1QztBQUVBOzs7Q0FHQyxHQUNNLFNBQVNVLGdCQUFnQlgsTUFBYyxFQUFFLEVBQUVDLE1BQWMsRUFBRTtJQUNoRSxPQUFPLEdBQUdRLGNBQWNULEtBQUtDLEtBQUssQ0FBQyxDQUFDO0FBQ3RDO0FBRUE7OztDQUdDLEdBQ00sU0FBU1c7SUFDZCx5REFBeUQ7SUFDekQsSUFBSSxJQUF5REcsRUFBRTtRQUM3RCwyQ0FBMkM7UUFDM0MsT0FBTyxjQUFjLDJCQUEyQjs7SUFDbEQ7SUFFQSx3REFBd0Q7SUFDeEQsT0FBT0MsS0FBS0QsR0FBRztBQUNqQjtBQUVBOztDQUVDLEdBQ00sU0FBU0UsZ0JBQWdCQyxRQUFnQjtJQUM5QyxPQUFPLElBQUlGLEtBQUtKLGdCQUFnQk07QUFDbEM7QUFFQTs7O0NBR0MsR0FDTSxTQUFTQyxzQkFBc0JuQixNQUFjLENBQUMsRUFBRUMsTUFBYyxDQUFDO0lBQ3BFLE9BQU9TLGdCQUFnQlYsS0FBS0M7QUFDOUI7QUFFQTs7O0NBR0MsR0FDRCxJQUFJbUIsWUFBWTtBQUNULFNBQVNDLGVBQWVDLFNBQWlCLElBQUk7SUFDbEQsT0FBTyxHQUFHQSxPQUFPLENBQUMsRUFBRSxFQUFFRixXQUFXO0FBQ25DO0FBRUE7O0NBRUMsR0FDTSxTQUFTRztJQUNkSCxZQUFZO0FBQ2QiLCJzb3VyY2VzIjpbIi9ob21lL2FsdGNvaW4tZGFkZHkvRG93bmxvYWRzL293bmx5L2xpYi9oeWRyYXRpb24vc2FmZS1yYW5kb20udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTYWZlIHJhbmRvbSB1dGlsaXRpZXMgZm9yIFNTUi9jbGllbnQgY29uc2lzdGVuY3lcbiAqIFByb3ZpZGVzIGRldGVybWluaXN0aWMgYWx0ZXJuYXRpdmVzIHRvIE1hdGgucmFuZG9tKCkgYW5kIERhdGUubm93KClcbiAqIHRvIHByZXZlbnQgaHlkcmF0aW9uIG1pc21hdGNoZXNcbiAqL1xuXG4vLyBTaW1wbGUgc2VlZGVkIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yIChMaW5lYXIgQ29uZ3J1ZW50aWFsIEdlbmVyYXRvcilcbmNsYXNzIFNlZWRlZFJhbmRvbSB7XG4gIHByaXZhdGUgc2VlZDogbnVtYmVyXG5cbiAgY29uc3RydWN0b3Ioc2VlZDogbnVtYmVyID0gMSkge1xuICAgIHRoaXMuc2VlZCA9IHNlZWRcbiAgfVxuXG4gIG5leHQoKTogbnVtYmVyIHtcbiAgICB0aGlzLnNlZWQgPSAodGhpcy5zZWVkICogOTMwMSArIDQ5Mjk3KSAlIDIzMzI4MFxuICAgIHJldHVybiB0aGlzLnNlZWQgLyAyMzMyODBcbiAgfVxuXG4gIG5leHRJbnQobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLm5leHQoKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW5cbiAgfVxuXG4gIG5leHRGbG9hdChtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLm5leHQoKSAqIChtYXggLSBtaW4pICsgbWluXG4gIH1cbn1cblxuLy8gR2xvYmFsIHNlZWRlZCByYW5kb20gaW5zdGFuY2VcbmxldCBnbG9iYWxTZWVkZWRSYW5kb206IFNlZWRlZFJhbmRvbSB8IG51bGwgPSBudWxsXG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgc2VlZGVkIHJhbmRvbSBnZW5lcmF0b3Igd2l0aCBhIGNvbnNpc3RlbnQgc2VlZFxuICogVGhpcyBzaG91bGQgYmUgY2FsbGVkIG9uY2UgZHVyaW5nIGFwcCBpbml0aWFsaXphdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZVNhZmVSYW5kb20oc2VlZD86IG51bWJlcik6IHZvaWQge1xuICAvLyBVc2UgYSBjb25zaXN0ZW50IHNlZWQgYmFzZWQgb24gYnVpbGQgdGltZSBvciBhIGZpeGVkIHZhbHVlXG4gIGNvbnN0IGRlZmF1bHRTZWVkID0gMTIzNDUgLy8gRml4ZWQgc2VlZCBmb3IgY29uc2lzdGVuY3lcbiAgZ2xvYmFsU2VlZGVkUmFuZG9tID0gbmV3IFNlZWRlZFJhbmRvbShzZWVkID8/IGRlZmF1bHRTZWVkKVxufVxuXG4vKipcbiAqIEdldCBhIGRldGVybWluaXN0aWMgcmFuZG9tIG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcbiAqIFNhZmUgZm9yIFNTUiBhcyBpdCBwcm9kdWNlcyB0aGUgc2FtZSBzZXF1ZW5jZSBvbiBzZXJ2ZXIgYW5kIGNsaWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2FmZVJhbmRvbSgpOiBudW1iZXIge1xuICBpZiAoIWdsb2JhbFNlZWRlZFJhbmRvbSkge1xuICAgIGluaXRpYWxpemVTYWZlUmFuZG9tKClcbiAgfVxuICByZXR1cm4gZ2xvYmFsU2VlZGVkUmFuZG9tIS5uZXh0KClcbn1cblxuLyoqXG4gKiBHZXQgYSBkZXRlcm1pbmlzdGljIHJhbmRvbSBpbnRlZ2VyIGJldHdlZW4gbWluIGFuZCBtYXggKGluY2x1c2l2ZSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhZmVSYW5kb21JbnQobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgaWYgKCFnbG9iYWxTZWVkZWRSYW5kb20pIHtcbiAgICBpbml0aWFsaXplU2FmZVJhbmRvbSgpXG4gIH1cbiAgcmV0dXJuIGdsb2JhbFNlZWRlZFJhbmRvbSEubmV4dEludChtaW4sIG1heClcbn1cblxuLyoqXG4gKiBHZXQgYSBkZXRlcm1pbmlzdGljIHJhbmRvbSBmbG9hdCBiZXR3ZWVuIG1pbiBhbmQgbWF4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYWZlUmFuZG9tRmxvYXQobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgaWYgKCFnbG9iYWxTZWVkZWRSYW5kb20pIHtcbiAgICBpbml0aWFsaXplU2FmZVJhbmRvbSgpXG4gIH1cbiAgcmV0dXJuIGdsb2JhbFNlZWRlZFJhbmRvbSEubmV4dEZsb2F0KG1pbiwgbWF4KVxufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEgY29uc2lzdGVudCBwZXJjZW50YWdlIHdpZHRoIGZvciBza2VsZXRvbiBjb21wb25lbnRzXG4gKiBSZXR1cm5zIGEgcGVyY2VudGFnZSBzdHJpbmcgbGlrZSBcIjY1JVwiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYWZlUmFuZG9tV2lkdGgobWluOiBudW1iZXIgPSA1MCwgbWF4OiBudW1iZXIgPSA5MCk6IHN0cmluZyB7XG4gIHJldHVybiBgJHtzYWZlUmFuZG9tSW50KG1pbiwgbWF4KX0lYFxufVxuXG4vKipcbiAqIFNhZmUgYWx0ZXJuYXRpdmUgdG8gRGF0ZS5ub3coKSB0aGF0IHJldHVybnMgYSBjb25zaXN0ZW50IHRpbWVzdGFtcFxuICogZHVyaW5nIFNTUiBhbmQgaW5pdGlhbCBjbGllbnQgcmVuZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYWZlRGF0ZU5vdygpOiBudW1iZXIge1xuICAvLyBEdXJpbmcgU1NSIG9yIGluaXRpYWwgcmVuZGVyLCByZXR1cm4gYSBmaXhlZCB0aW1lc3RhbXBcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICF3aW5kb3cucGVyZm9ybWFuY2U/Lm5vdykge1xuICAgIC8vIFJldHVybiBhIGZpeGVkIHRpbWVzdGFtcCBmb3IgY29uc2lzdGVuY3lcbiAgICByZXR1cm4gMTY0MDk5NTIwMDAwMCAvLyBKYW4gMSwgMjAyMiAwMDowMDowMCBVVENcbiAgfVxuICBcbiAgLy8gT24gY2xpZW50IGFmdGVyIGh5ZHJhdGlvbiwgcmV0dXJuIGFjdHVhbCBjdXJyZW50IHRpbWVcbiAgcmV0dXJuIERhdGUubm93KClcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBzYWZlIGRhdGUgb2JqZWN0IHRoYXQncyBjb25zaXN0ZW50IGR1cmluZyBTU1JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhZmVEYXRlRnJvbU5vdyhvZmZzZXRNczogbnVtYmVyKTogRGF0ZSB7XG4gIHJldHVybiBuZXcgRGF0ZShzYWZlRGF0ZU5vdygpICsgb2Zmc2V0TXMpXG59XG5cbi8qKlxuICogR2VuZXJhdGUgYSBkZXRlcm1pbmlzdGljIHByb2dyZXNzIGluY3JlbWVudCBmb3IgYW5pbWF0aW9uc1xuICogU2FmZSBhbHRlcm5hdGl2ZSB0byBNYXRoLnJhbmRvbSgpICogMTAgZm9yIHByb2dyZXNzIGJhcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhZmVQcm9ncmVzc0luY3JlbWVudChtaW46IG51bWJlciA9IDIsIG1heDogbnVtYmVyID0gOCk6IG51bWJlciB7XG4gIHJldHVybiBzYWZlUmFuZG9tRmxvYXQobWluLCBtYXgpXG59XG5cbi8qKlxuICogR2VuZXJhdGUgYSBjb25zaXN0ZW50IElEIHRoYXQncyBzYWZlIGZvciBTU1JcbiAqIFVzZXMgYSBjb3VudGVyIGluc3RlYWQgb2YgcmFuZG9tIG51bWJlcnMgb3IgdGltZXN0YW1wc1xuICovXG5sZXQgaWRDb3VudGVyID0gMFxuZXhwb3J0IGZ1bmN0aW9uIHNhZmVHZW5lcmF0ZUlkKHByZWZpeDogc3RyaW5nID0gJ2lkJyk6IHN0cmluZyB7XG4gIHJldHVybiBgJHtwcmVmaXh9LSR7KytpZENvdW50ZXJ9YFxufVxuXG4vKipcbiAqIFJlc2V0IHRoZSBJRCBjb3VudGVyICh1c2VmdWwgZm9yIHRlc3RpbmcpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldElkQ291bnRlcigpOiB2b2lkIHtcbiAgaWRDb3VudGVyID0gMFxufSJdLCJuYW1lcyI6WyJTZWVkZWRSYW5kb20iLCJjb25zdHJ1Y3RvciIsInNlZWQiLCJuZXh0IiwibmV4dEludCIsIm1pbiIsIm1heCIsIk1hdGgiLCJmbG9vciIsIm5leHRGbG9hdCIsImdsb2JhbFNlZWRlZFJhbmRvbSIsImluaXRpYWxpemVTYWZlUmFuZG9tIiwiZGVmYXVsdFNlZWQiLCJzYWZlUmFuZG9tIiwic2FmZVJhbmRvbUludCIsInNhZmVSYW5kb21GbG9hdCIsInNhZmVSYW5kb21XaWR0aCIsInNhZmVEYXRlTm93Iiwid2luZG93IiwicGVyZm9ybWFuY2UiLCJub3ciLCJEYXRlIiwic2FmZURhdGVGcm9tTm93Iiwib2Zmc2V0TXMiLCJzYWZlUHJvZ3Jlc3NJbmNyZW1lbnQiLCJpZENvdW50ZXIiLCJzYWZlR2VuZXJhdGVJZCIsInByZWZpeCIsInJlc2V0SWRDb3VudGVyIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/hydration/safe-random.ts\n");

/***/ }),

/***/ "(rsc)/./lib/performance/collector.ts":
/*!**************************************!*\
  !*** ./lib/performance/collector.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PerformanceCollector: () => (/* binding */ PerformanceCollector),\n/* harmony export */   measureAsync: () => (/* binding */ measureAsync),\n/* harmony export */   measureSync: () => (/* binding */ measureSync),\n/* harmony export */   performanceCollector: () => (/* binding */ performanceCollector)\n/* harmony export */ });\n/* harmony import */ var _storage_memory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./storage/memory */ \"(rsc)/./lib/performance/storage/memory.ts\");\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/utils */ \"(rsc)/./lib/utils.ts\");\n/* harmony import */ var _lib_hydration_safe_random__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/hydration/safe-random */ \"(rsc)/./lib/hydration/safe-random.ts\");\n// Performance metrics collector\n\n\n\n// Default performance configuration\nconst DEFAULT_CONFIG = {\n    enabled: true,\n    sampleRate: 1.0,\n    retentionDays: 7,\n    thresholds: {\n        api: {\n            responseTime: {\n                warning: 1000,\n                critical: 3000\n            },\n            errorRate: {\n                warning: 5,\n                critical: 10\n            }\n        },\n        events: {\n            processingTime: {\n                warning: 500,\n                critical: 2000\n            },\n            queueSize: {\n                warning: 100,\n                critical: 500\n            }\n        },\n        blockchain: {\n            queryTime: {\n                warning: 2000,\n                critical: 5000\n            },\n            transactionTime: {\n                warning: 10000,\n                critical: 30000\n            }\n        }\n    },\n    alerting: {\n        enabled: true\n    },\n    storage: {\n        type: 'memory',\n        maxMemoryEntries: 10000\n    }\n};\nclass PerformanceCollector {\n    constructor(config){\n        this.alerts = [];\n        this.alertCallbacks = [];\n        this.config = {\n            ...DEFAULT_CONFIG,\n            ...config\n        };\n        this.storage = this.createStorage();\n    }\n    createStorage() {\n        switch(this.config.storage.type){\n            case 'memory':\n                return new _storage_memory__WEBPACK_IMPORTED_MODULE_0__.MemoryStorage(this.config.storage.maxMemoryEntries || 10000);\n            // TODO: Add MongoDB and Redis storage implementations\n            default:\n                return new _storage_memory__WEBPACK_IMPORTED_MODULE_0__.MemoryStorage(this.config.storage.maxMemoryEntries || 10000);\n        }\n    }\n    // Check if we should collect this metric based on sample rate\n    shouldCollect() {\n        if (!this.config.enabled) return false;\n        return (0,_lib_hydration_safe_random__WEBPACK_IMPORTED_MODULE_2__.safeRandom)() < this.config.sampleRate;\n    }\n    // Record API performance metric\n    async recordAPIMetric(data) {\n        if (!this.shouldCollect()) return;\n        const metric = {\n            id: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n            name: `api_${data.method.toLowerCase()}_${data.endpoint.replace(/[^a-zA-Z0-9]/g, '_')}`,\n            value: data.responseTime,\n            unit: 'ms',\n            timestamp: new Date(),\n            category: 'api',\n            endpoint: data.endpoint,\n            method: data.method,\n            statusCode: data.statusCode,\n            responseTime: data.responseTime,\n            requestSize: data.requestSize,\n            responseSize: data.responseSize,\n            userAgent: data.userAgent,\n            ip: data.ip,\n            tags: data.tags\n        };\n        await this.storage.store(metric);\n        await this.checkAPIThresholds(metric);\n    }\n    // Record event processing performance metric\n    async recordEventMetric(data) {\n        if (!this.shouldCollect()) return;\n        const metric = {\n            id: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n            name: `event_${data.eventType.toLowerCase().replace(/[^a-zA-Z0-9]/g, '_')}`,\n            value: data.processingTime,\n            unit: 'ms',\n            timestamp: new Date(),\n            category: 'event',\n            eventType: data.eventType,\n            processingTime: data.processingTime,\n            queueSize: data.queueSize,\n            eventSource: data.eventSource,\n            blockHeight: data.blockHeight,\n            transactionId: data.transactionId,\n            tags: data.tags\n        };\n        await this.storage.store(metric);\n        await this.checkEventThresholds(metric);\n    }\n    // Record blockchain operation performance metric\n    async recordBlockchainMetric(data) {\n        if (!this.shouldCollect()) return;\n        const metric = {\n            id: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n            name: `blockchain_${data.operation}_${data.network}`,\n            value: data.responseTime,\n            unit: 'ms',\n            timestamp: new Date(),\n            category: 'blockchain',\n            operation: data.operation,\n            network: data.network,\n            contractAddress: data.contractAddress,\n            gasUsed: data.gasUsed,\n            blockHeight: data.blockHeight,\n            tags: {\n                ...data.tags,\n                success: data.success.toString()\n            }\n        };\n        await this.storage.store(metric);\n        await this.checkBlockchainThresholds(metric);\n    }\n    // Record UI performance metric\n    async recordUIMetric(data) {\n        if (!this.shouldCollect()) return;\n        const metric = {\n            id: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n            name: `ui_${data.component.toLowerCase().replace(/[^a-zA-Z0-9]/g, '_')}`,\n            value: data.renderTime,\n            unit: 'ms',\n            timestamp: new Date(),\n            category: 'ui',\n            component: data.component,\n            renderTime: data.renderTime,\n            interactionType: data.interactionType,\n            route: data.route,\n            tags: data.tags\n        };\n        await this.storage.store(metric);\n    }\n    // Check API performance thresholds and create alerts\n    async checkAPIThresholds(metric) {\n        const thresholds = this.config.thresholds.api;\n        if (metric.responseTime > thresholds.responseTime.critical) {\n            await this.createAlert({\n                type: 'critical',\n                category: 'api',\n                message: `API response time critical: ${metric.endpoint} took ${metric.responseTime}ms`,\n                metric,\n                threshold: thresholds.responseTime.critical\n            });\n        } else if (metric.responseTime > thresholds.responseTime.warning) {\n            await this.createAlert({\n                type: 'warning',\n                category: 'api',\n                message: `API response time warning: ${metric.endpoint} took ${metric.responseTime}ms`,\n                metric,\n                threshold: thresholds.responseTime.warning\n            });\n        }\n        // Check error rate (requires aggregation)\n        if (metric.statusCode >= 400) {\n            const recentMetrics = await this.storage.query({\n                category: 'api',\n                startTime: new Date(Date.now() - 5 * 60 * 1000),\n                tags: {\n                    endpoint: metric.endpoint\n                }\n            });\n            const errorCount = recentMetrics.filter((m)=>m.statusCode >= 400).length;\n            const totalCount = recentMetrics.length;\n            const errorRate = totalCount > 0 ? errorCount / totalCount * 100 : 0;\n            if (errorRate > thresholds.errorRate.critical) {\n                await this.createAlert({\n                    type: 'critical',\n                    category: 'api',\n                    message: `API error rate critical: ${metric.endpoint} has ${errorRate.toFixed(1)}% error rate`,\n                    metric,\n                    threshold: thresholds.errorRate.critical\n                });\n            } else if (errorRate > thresholds.errorRate.warning) {\n                await this.createAlert({\n                    type: 'warning',\n                    category: 'api',\n                    message: `API error rate warning: ${metric.endpoint} has ${errorRate.toFixed(1)}% error rate`,\n                    metric,\n                    threshold: thresholds.errorRate.warning\n                });\n            }\n        }\n    }\n    // Check event processing thresholds\n    async checkEventThresholds(metric) {\n        const thresholds = this.config.thresholds.events;\n        if (metric.processingTime > thresholds.processingTime.critical) {\n            await this.createAlert({\n                type: 'critical',\n                category: 'event',\n                message: `Event processing time critical: ${metric.eventType} took ${metric.processingTime}ms`,\n                metric,\n                threshold: thresholds.processingTime.critical\n            });\n        } else if (metric.processingTime > thresholds.processingTime.warning) {\n            await this.createAlert({\n                type: 'warning',\n                category: 'event',\n                message: `Event processing time warning: ${metric.eventType} took ${metric.processingTime}ms`,\n                metric,\n                threshold: thresholds.processingTime.warning\n            });\n        }\n        if (metric.queueSize > thresholds.queueSize.critical) {\n            await this.createAlert({\n                type: 'critical',\n                category: 'event',\n                message: `Event queue size critical: ${metric.queueSize} events in queue`,\n                metric,\n                threshold: thresholds.queueSize.critical\n            });\n        } else if (metric.queueSize > thresholds.queueSize.warning) {\n            await this.createAlert({\n                type: 'warning',\n                category: 'event',\n                message: `Event queue size warning: ${metric.queueSize} events in queue`,\n                metric,\n                threshold: thresholds.queueSize.warning\n            });\n        }\n    }\n    // Check blockchain operation thresholds\n    async checkBlockchainThresholds(metric) {\n        const thresholds = this.config.thresholds.blockchain;\n        const thresholdKey = metric.operation === 'transaction' ? 'transactionTime' : 'queryTime';\n        const threshold = thresholds[thresholdKey];\n        if (metric.value > threshold.critical) {\n            await this.createAlert({\n                type: 'critical',\n                category: 'blockchain',\n                message: `Blockchain ${metric.operation} time critical: ${metric.value}ms on ${metric.network}`,\n                metric,\n                threshold: threshold.critical\n            });\n        } else if (metric.value > threshold.warning) {\n            await this.createAlert({\n                type: 'warning',\n                category: 'blockchain',\n                message: `Blockchain ${metric.operation} time warning: ${metric.value}ms on ${metric.network}`,\n                metric,\n                threshold: threshold.warning\n            });\n        }\n    }\n    // Create performance alert\n    async createAlert(data) {\n        const alert = {\n            id: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n            type: data.type,\n            category: data.category,\n            message: data.message,\n            metric: data.metric,\n            threshold: data.threshold,\n            timestamp: new Date(),\n            resolved: false\n        };\n        this.alerts.push(alert);\n        // Notify alert callbacks\n        this.alertCallbacks.forEach((callback)=>{\n            try {\n                callback(alert);\n            } catch (error) {\n                console.error('[PerformanceCollector] Error in alert callback:', error);\n            }\n        });\n        console.warn(`[PerformanceCollector] ${data.type.toUpperCase()} ALERT: ${data.message}`);\n    }\n    // Subscribe to performance alerts\n    onAlert(callback) {\n        this.alertCallbacks.push(callback);\n        return ()=>{\n            const index = this.alertCallbacks.indexOf(callback);\n            if (index > -1) {\n                this.alertCallbacks.splice(index, 1);\n            }\n        };\n    }\n    // Get performance metrics\n    async getMetrics(filters) {\n        return this.storage.query(filters);\n    }\n    // Get aggregated metrics\n    async getAggregatedMetrics(category, timeRange, groupBy) {\n        return this.storage.getAggregated(category, timeRange, groupBy);\n    }\n    // Get active alerts\n    getActiveAlerts() {\n        return this.alerts.filter((alert)=>!alert.resolved);\n    }\n    // Resolve alert\n    resolveAlert(alertId) {\n        const alert = this.alerts.find((a)=>a.id === alertId);\n        if (alert) {\n            alert.resolved = true;\n            alert.resolvedAt = new Date();\n        }\n    }\n    // Cleanup old metrics\n    async cleanup() {\n        const cutoffDate = new Date(Date.now() - this.config.retentionDays * 24 * 60 * 60 * 1000);\n        const deletedCount = await this.storage.cleanup(cutoffDate);\n        console.log(`[PerformanceCollector] Cleaned up ${deletedCount} old metrics`);\n        // Clean up old alerts (keep for 30 days)\n        const alertCutoff = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n        const initialAlertCount = this.alerts.length;\n        this.alerts = this.alerts.filter((alert)=>alert.timestamp > alertCutoff);\n        const removedAlerts = initialAlertCount - this.alerts.length;\n        if (removedAlerts > 0) {\n            console.log(`[PerformanceCollector] Cleaned up ${removedAlerts} old alerts`);\n        }\n    }\n    // Update configuration\n    updateConfig(newConfig) {\n        this.config = {\n            ...this.config,\n            ...newConfig\n        };\n    }\n    // Get current configuration\n    getConfig() {\n        return {\n            ...this.config\n        };\n    }\n}\n// Global performance collector instance\nconst performanceCollector = new PerformanceCollector();\n// Utility function to measure execution time\nasync function measureAsync(operation, onComplete) {\n    const startTime = performance.now();\n    try {\n        const result = await operation();\n        const duration = performance.now() - startTime;\n        onComplete?.(duration, result);\n        return result;\n    } catch (error) {\n        const duration = performance.now() - startTime;\n        onComplete?.(duration, undefined, error);\n        throw error;\n    }\n}\n// Utility function to measure synchronous execution time\nfunction measureSync(operation, onComplete) {\n    const startTime = performance.now();\n    try {\n        const result = operation();\n        const duration = performance.now() - startTime;\n        onComplete?.(duration, result);\n        return result;\n    } catch (error) {\n        const duration = performance.now() - startTime;\n        onComplete?.(duration, undefined, error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/performance/collector.ts\n");

/***/ }),

/***/ "(rsc)/./lib/performance/middleware.ts":
/*!***************************************!*\
  !*** ./lib/performance/middleware.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   measureOperation: () => (/* binding */ measureOperation),\n/* harmony export */   trackAPIPerformance: () => (/* binding */ trackAPIPerformance),\n/* harmony export */   trackBlockchainOperation: () => (/* binding */ trackBlockchainOperation),\n/* harmony export */   trackExternalAPICall: () => (/* binding */ trackExternalAPICall),\n/* harmony export */   withPerformanceTracking: () => (/* binding */ withPerformanceTracking)\n/* harmony export */ });\n/* harmony import */ var _collector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./collector */ \"(rsc)/./lib/performance/collector.ts\");\n// Performance monitoring middleware for API routes\n\n// API performance tracking middleware\nfunction withPerformanceTracking(handler) {\n    return async function trackedHandler(request, ...args) {\n        const startTime = performance.now();\n        const endpoint = new URL(request.url).pathname;\n        const method = request.method;\n        // Get request size\n        const requestSize = request.headers.get('content-length') ? parseInt(request.headers.get('content-length')) : undefined;\n        let response;\n        let statusCode = 200;\n        let responseSize;\n        try {\n            response = await handler(request, ...args);\n            statusCode = response.status;\n            // Get response size if available\n            const contentLength = response.headers.get('content-length');\n            if (contentLength) {\n                responseSize = parseInt(contentLength);\n            }\n            return response;\n        } catch (error) {\n            statusCode = 500;\n            throw error;\n        } finally{\n            const responseTime = performance.now() - startTime;\n            // Record API performance metric\n            await _collector__WEBPACK_IMPORTED_MODULE_0__.performanceCollector.recordAPIMetric({\n                endpoint,\n                method,\n                statusCode,\n                responseTime,\n                requestSize,\n                responseSize,\n                userAgent: request.headers.get('user-agent') || undefined,\n                ip: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown',\n                tags: {\n                    route: endpoint,\n                    status_class: `${Math.floor(statusCode / 100)}xx`\n                }\n            });\n        }\n    };\n}\n// Higher-order function to wrap API route handlers\nfunction trackAPIPerformance(handler) {\n    return withPerformanceTracking(handler);\n}\n// Middleware for measuring specific operations within handlers\nasync function measureOperation(operationName, operation, tags) {\n    const startTime = performance.now();\n    try {\n        const result = await operation();\n        const duration = performance.now() - startTime;\n        // Record as a custom metric\n        await _collector__WEBPACK_IMPORTED_MODULE_0__.performanceCollector.recordAPIMetric({\n            endpoint: `/internal/${operationName}`,\n            method: 'POST',\n            statusCode: 200,\n            responseTime: duration,\n            tags: {\n                operation: operationName,\n                ...tags\n            }\n        });\n        return result;\n    } catch (error) {\n        const duration = performance.now() - startTime;\n        // Record failed operation\n        await _collector__WEBPACK_IMPORTED_MODULE_0__.performanceCollector.recordAPIMetric({\n            endpoint: `/internal/${operationName}`,\n            method: 'POST',\n            statusCode: 500,\n            responseTime: duration,\n            tags: {\n                operation: operationName,\n                error: error instanceof Error ? error.message : 'unknown',\n                ...tags\n            }\n        });\n        throw error;\n    }\n}\n// Utility to track external API calls (like Dapper Core API)\nasync function trackExternalAPICall(apiName, endpoint, method, operation) {\n    const startTime = performance.now();\n    try {\n        const result = await operation();\n        const duration = performance.now() - startTime;\n        // Record external API call performance\n        await _collector__WEBPACK_IMPORTED_MODULE_0__.performanceCollector.recordAPIMetric({\n            endpoint: `${apiName}${endpoint}`,\n            method: method,\n            statusCode: 200,\n            responseTime: duration,\n            tags: {\n                external_api: apiName,\n                api_type: 'external'\n            }\n        });\n        return result;\n    } catch (error) {\n        const duration = performance.now() - startTime;\n        // Determine status code from error\n        let statusCode = 500;\n        if (error && typeof error === 'object' && 'status' in error) {\n            statusCode = error.status || 500;\n        }\n        await _collector__WEBPACK_IMPORTED_MODULE_0__.performanceCollector.recordAPIMetric({\n            endpoint: `${apiName}${endpoint}`,\n            method: method,\n            statusCode,\n            responseTime: duration,\n            tags: {\n                external_api: apiName,\n                api_type: 'external',\n                error: error instanceof Error ? error.message : 'unknown'\n            }\n        });\n        throw error;\n    }\n}\n// Blockchain operation tracking\nasync function trackBlockchainOperation(operation, network, contractAddress, blockchainCall) {\n    const startTime = performance.now();\n    try {\n        const result = await blockchainCall();\n        const duration = performance.now() - startTime;\n        await _collector__WEBPACK_IMPORTED_MODULE_0__.performanceCollector.recordBlockchainMetric({\n            operation,\n            network,\n            responseTime: duration,\n            contractAddress,\n            success: true,\n            tags: {\n                contract: contractAddress || 'unknown'\n            }\n        });\n        return result;\n    } catch (error) {\n        const duration = performance.now() - startTime;\n        await _collector__WEBPACK_IMPORTED_MODULE_0__.performanceCollector.recordBlockchainMetric({\n            operation,\n            network,\n            responseTime: duration,\n            contractAddress,\n            success: false,\n            tags: {\n                contract: contractAddress || 'unknown',\n                error: error instanceof Error ? error.message : 'unknown'\n            }\n        });\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/performance/middleware.ts\n");

/***/ }),

/***/ "(rsc)/./lib/performance/storage/memory.ts":
/*!*******************************************!*\
  !*** ./lib/performance/storage/memory.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MemoryStorage: () => (/* binding */ MemoryStorage)\n/* harmony export */ });\n// In-memory performance metrics storage\nclass MemoryStorage {\n    constructor(maxEntries = 10000){\n        this.metrics = [];\n        this.maxEntries = maxEntries;\n    }\n    async store(metric) {\n        this.metrics.push(metric);\n        // Remove oldest entries if we exceed max capacity\n        if (this.metrics.length > this.maxEntries) {\n            const removeCount = this.metrics.length - this.maxEntries;\n            this.metrics.splice(0, removeCount);\n        }\n    }\n    async query(filters) {\n        let filtered = this.metrics;\n        // Filter by category\n        if (filters.category) {\n            filtered = filtered.filter((m)=>m.category === filters.category);\n        }\n        // Filter by time range\n        if (filters.startTime) {\n            filtered = filtered.filter((m)=>m.timestamp >= filters.startTime);\n        }\n        if (filters.endTime) {\n            filtered = filtered.filter((m)=>m.timestamp <= filters.endTime);\n        }\n        // Filter by tags\n        if (filters.tags) {\n            filtered = filtered.filter((m)=>{\n                if (!m.tags) return false;\n                return Object.entries(filters.tags).every(([key, value])=>m.tags[key] === value);\n            });\n        }\n        // Sort by timestamp (newest first)\n        filtered.sort((a, b)=>b.timestamp.getTime() - a.timestamp.getTime());\n        // Apply limit\n        if (filters.limit) {\n            filtered = filtered.slice(0, filters.limit);\n        }\n        return filtered;\n    }\n    async getAggregated(category, timeRange, groupBy) {\n        // Filter metrics by category and time range\n        const filtered = this.metrics.filter((m)=>m.category === category && m.timestamp >= timeRange.start && m.timestamp <= timeRange.end);\n        if (filtered.length === 0) {\n            return [];\n        }\n        // Group metrics\n        const groups = new Map();\n        filtered.forEach((metric)=>{\n            let groupKey = 'all';\n            if (groupBy) {\n                switch(groupBy){\n                    case 'endpoint':\n                        groupKey = metric.endpoint || 'unknown';\n                        break;\n                    case 'eventType':\n                        groupKey = metric.eventType || 'unknown';\n                        break;\n                    case 'operation':\n                        groupKey = metric.operation || 'unknown';\n                        break;\n                    case 'component':\n                        groupKey = metric.component || 'unknown';\n                        break;\n                    case 'hour':\n                        groupKey = metric.timestamp.toISOString().slice(0, 13) + ':00:00';\n                        break;\n                    case 'day':\n                        groupKey = metric.timestamp.toISOString().slice(0, 10);\n                        break;\n                    default:\n                        groupKey = 'all';\n                }\n            }\n            if (!groups.has(groupKey)) {\n                groups.set(groupKey, []);\n            }\n            groups.get(groupKey).push(metric);\n        });\n        // Calculate aggregations for each group\n        const results = Array.from(groups.entries()).map(([group, metrics])=>{\n            const values = metrics.map((m)=>m.value).sort((a, b)=>a - b);\n            const count = values.length;\n            const sum = values.reduce((a, b)=>a + b, 0);\n            const average = sum / count;\n            const min = values[0];\n            const max = values[values.length - 1];\n            // Calculate percentiles\n            const p95Index = Math.floor(count * 0.95);\n            const p99Index = Math.floor(count * 0.99);\n            const p95 = values[Math.min(p95Index, count - 1)];\n            const p99 = values[Math.min(p99Index, count - 1)];\n            return {\n                group,\n                count,\n                average: Math.round(average * 100) / 100,\n                min,\n                max,\n                p95,\n                p99\n            };\n        });\n        // Sort by group name\n        results.sort((a, b)=>a.group.localeCompare(b.group));\n        return results;\n    }\n    async cleanup(olderThan) {\n        const initialCount = this.metrics.length;\n        this.metrics = this.metrics.filter((m)=>m.timestamp > olderThan);\n        return initialCount - this.metrics.length;\n    }\n    // Additional methods for memory storage\n    getStorageStats() {\n        const totalMetrics = this.metrics.length;\n        const memoryUsage = JSON.stringify(this.metrics).length // Rough estimate\n        ;\n        let oldestMetric;\n        let newestMetric;\n        if (totalMetrics > 0) {\n            const timestamps = this.metrics.map((m)=>m.timestamp).sort();\n            oldestMetric = timestamps[0];\n            newestMetric = timestamps[timestamps.length - 1];\n        }\n        return {\n            totalMetrics,\n            memoryUsage,\n            oldestMetric,\n            newestMetric\n        };\n    }\n    clear() {\n        this.metrics = [];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/performance/storage/memory.ts\n");

/***/ }),

/***/ "(rsc)/./lib/utils.ts":
/*!**********************!*\
  !*** ./lib/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cn: () => (/* binding */ cn),\n/* harmony export */   generateId: () => (/* binding */ generateId)\n/* harmony export */ });\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(rsc)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tailwind-merge */ \"(rsc)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\");\n/* harmony import */ var _lib_hydration_safe_random__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/hydration/safe-random */ \"(rsc)/./lib/hydration/safe-random.ts\");\n\n\nfunction cn(...inputs) {\n    return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_1__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(inputs));\n}\n\n// Generate a unique ID (SSR-safe)\nfunction generateId() {\n    return (0,_lib_hydration_safe_random__WEBPACK_IMPORTED_MODULE_2__.safeGenerateId)();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvdXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNEM7QUFDSjtBQUVqQyxTQUFTRSxHQUFHLEdBQUdDLE1BQW9CO0lBQ3hDLE9BQU9GLHVEQUFPQSxDQUFDRCwwQ0FBSUEsQ0FBQ0c7QUFDdEI7QUFFNEQ7QUFFNUQsa0NBQWtDO0FBQzNCLFNBQVNFO0lBQ2QsT0FBT0QsMEVBQWNBO0FBQ3ZCIiwic291cmNlcyI6WyIvaG9tZS9hbHRjb2luLWRhZGR5L0Rvd25sb2Fkcy9vd25seS9saWIvdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xzeCwgdHlwZSBDbGFzc1ZhbHVlIH0gZnJvbSAnY2xzeCdcbmltcG9ydCB7IHR3TWVyZ2UgfSBmcm9tICd0YWlsd2luZC1tZXJnZSdcblxuZXhwb3J0IGZ1bmN0aW9uIGNuKC4uLmlucHV0czogQ2xhc3NWYWx1ZVtdKSB7XG4gIHJldHVybiB0d01lcmdlKGNsc3goaW5wdXRzKSlcbn1cblxuaW1wb3J0IHsgc2FmZUdlbmVyYXRlSWQgfSBmcm9tIFwiQC9saWIvaHlkcmF0aW9uL3NhZmUtcmFuZG9tXCJcblxuLy8gR2VuZXJhdGUgYSB1bmlxdWUgSUQgKFNTUi1zYWZlKVxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlSWQoKTogc3RyaW5nIHtcbiAgcmV0dXJuIHNhZmVHZW5lcmF0ZUlkKClcbn1cbiJdLCJuYW1lcyI6WyJjbHN4IiwidHdNZXJnZSIsImNuIiwiaW5wdXRzIiwic2FmZUdlbmVyYXRlSWQiLCJnZW5lcmF0ZUlkIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/utils.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fnft%2Fmint%2Froute&page=%2Fapi%2Fnft%2Fmint%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnft%2Fmint%2Froute.ts&appDir=%2Fhome%2Faltcoin-daddy%2FDownloads%2Fownly%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Faltcoin-daddy%2FDownloads%2Fownly&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fnft%2Fmint%2Froute&page=%2Fapi%2Fnft%2Fmint%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnft%2Fmint%2Froute.ts&appDir=%2Fhome%2Faltcoin-daddy%2FDownloads%2Fownly%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Faltcoin-daddy%2FDownloads%2Fownly&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _home_altcoin_daddy_Downloads_ownly_app_api_nft_mint_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/nft/mint/route.ts */ \"(rsc)/./app/api/nft/mint/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/nft/mint/route\",\n        pathname: \"/api/nft/mint\",\n        filename: \"route\",\n        bundlePath: \"app/api/nft/mint/route\"\n    },\n    resolvedPagePath: \"/home/altcoin-daddy/Downloads/ownly/app/api/nft/mint/route.ts\",\n    nextConfigOutput,\n    userland: _home_altcoin_daddy_Downloads_ownly_app_api_nft_mint_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZuZnQlMkZtaW50JTJGcm91dGUmcGFnZT0lMkZhcGklMkZuZnQlMkZtaW50JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGbmZ0JTJGbWludCUyRnJvdXRlLnRzJmFwcERpcj0lMkZob21lJTJGYWx0Y29pbi1kYWRkeSUyRkRvd25sb2FkcyUyRm93bmx5JTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZob21lJTJGYWx0Y29pbi1kYWRkeSUyRkRvd25sb2FkcyUyRm93bmx5JmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNhO0FBQzFGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRiIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvaG9tZS9hbHRjb2luLWRhZGR5L0Rvd25sb2Fkcy9vd25seS9hcHAvYXBpL25mdC9taW50L3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9uZnQvbWludC9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL25mdC9taW50XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9uZnQvbWludC9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9ob21lL2FsdGNvaW4tZGFkZHkvRG93bmxvYWRzL293bmx5L2FwcC9hcGkvbmZ0L21pbnQvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICB3b3JrQXN5bmNTdG9yYWdlLFxuICAgICAgICB3b3JrVW5pdEFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fnft%2Fmint%2Froute&page=%2Fapi%2Fnft%2Fmint%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnft%2Fmint%2Froute.ts&appDir=%2Fhome%2Faltcoin-daddy%2FDownloads%2Fownly%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Faltcoin-daddy%2FDownloads%2Fownly&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "?32c4":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?63cd":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?f624":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "module":
/*!*************************!*\
  !*** external "module" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("module");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ "node:diagnostics_channel":
/*!*******************************************!*\
  !*** external "node:diagnostics_channel" ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:diagnostics_channel");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:events");

/***/ }),

/***/ "node:os":
/*!**************************!*\
  !*** external "node:os" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:os");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:path");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "stream/web":
/*!*****************************!*\
  !*** external "stream/web" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream/web");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@walletconnect","vendor-chunks/next","vendor-chunks/@onflow","vendor-chunks/node-fetch","vendor-chunks/ox","vendor-chunks/ws","vendor-chunks/tailwind-merge","vendor-chunks/multiformats","vendor-chunks/@msgpack","vendor-chunks/pino","vendor-chunks/@improbable-eng","vendor-chunks/@scure","vendor-chunks/event-target-shim","vendor-chunks/unstorage","vendor-chunks/safe-stable-stringify","vendor-chunks/blakejs","vendor-chunks/sonic-boom","vendor-chunks/thread-stream","vendor-chunks/slow-redact","vendor-chunks/preact","vendor-chunks/tslib","vendor-chunks/pino-std-serializers","vendor-chunks/sha3","vendor-chunks/detect-browser","vendor-chunks/uint8arrays","vendor-chunks/idb-keyval","vendor-chunks/base-x","vendor-chunks/abort-controller","vendor-chunks/uuid","vendor-chunks/quick-format-unescaped","vendor-chunks/destr","vendor-chunks/on-exit-leak-free","vendor-chunks/atomic-sleep","vendor-chunks/cross-fetch","vendor-chunks/clsx","vendor-chunks/bs58","vendor-chunks/isomorphic-ws","vendor-chunks/web-streams-polyfill","vendor-chunks/@web-std","vendor-chunks/protobufjs","vendor-chunks/cborg","vendor-chunks/nft.storage","vendor-chunks/@ipld","vendor-chunks/streaming-iterables","vendor-chunks/ipfs-unixfs-importer","vendor-chunks/@protobufjs","vendor-chunks/ipfs-unixfs","vendor-chunks/murmurhash3js-revisited","vendor-chunks/@assemblyscript","vendor-chunks/@web3-storage","vendor-chunks/hamt-sharding","vendor-chunks/mrmime","vendor-chunks/bl","vendor-chunks/ipfs-core-utils","vendor-chunks/ipfs-car","vendor-chunks/sparse-array","vendor-chunks/retry","vendor-chunks/blockstore-core","vendor-chunks/merge-options","vendor-chunks/carbites","vendor-chunks/throttled-queue","vendor-chunks/rabin-wasm","vendor-chunks/p-retry","vendor-chunks/data-uri-to-buffer","vendor-chunks/varint","vendor-chunks/it-pipe","vendor-chunks/it-peekable","vendor-chunks/err-code","vendor-chunks/it-parallel-batch","vendor-chunks/browser-readablestream-to-it","vendor-chunks/it-batch","vendor-chunks/@multiformats","vendor-chunks/blob-to-it","vendor-chunks/it-take","vendor-chunks/it-map","vendor-chunks/it-filter","vendor-chunks/it-drain","vendor-chunks/it-last","vendor-chunks/it-all","vendor-chunks/web-encoding","vendor-chunks/is-plain-obj"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fnft%2Fmint%2Froute&page=%2Fapi%2Fnft%2Fmint%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnft%2Fmint%2Froute.ts&appDir=%2Fhome%2Faltcoin-daddy%2FDownloads%2Fownly%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Faltcoin-daddy%2FDownloads%2Fownly&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();